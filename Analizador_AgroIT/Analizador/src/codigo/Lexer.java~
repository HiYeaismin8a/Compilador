/* The following code was generated by JFlex 1.4.3 on 26/06/21 14:29 */

package codigo;
import static codigo.Tokens.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 26/06/21 14:29 from the specification file
 * <tt>D:/ITT/Lenguajes y Automatas/V14/Analizador lexico/src/codigo/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\53\1\54\2\0\1\53\22\0\1\53\2\0\1\55\4\0"+
    "\1\45\1\46\1\44\1\35\1\42\1\34\1\36\1\43\12\2\1\55"+
    "\1\55\1\37\1\41\1\40\2\0\32\1\1\51\1\0\1\52\1\0"+
    "\1\26\1\0\1\6\1\21\1\5\1\13\1\10\1\30\1\25\1\22"+
    "\1\3\2\1\1\23\1\16\1\4\1\12\1\11\1\31\1\7\1\24"+
    "\1\20\1\14\1\15\1\33\1\27\1\32\1\17\1\47\1\0\1\50"+
    "\u1f9b\0\1\55\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\16\2\1\1\2\2\1\4"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\2\1\25\24\2\1\25\4\2\1\26\1\27\1\26"+
    "\1\30\1\31\1\22\1\32\1\33\1\3\1\24\17\2"+
    "\1\25\15\2\1\26\1\0\34\2\1\0\25\2\1\22"+
    "\31\2\1\25\5\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\346\0\u0114\0\u0142"+
    "\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u0256\0\u0284\0\u02b2"+
    "\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398\0\u03c6\0\u03c6\0\u03f4"+
    "\0\u0422\0\u0450\0\56\0\u047e\0\u04ac\0\56\0\56\0\56"+
    "\0\56\0\56\0\56\0\u04da\0\u0508\0\u0536\0\u0564\0\134"+
    "\0\u0592\0\u05c0\0\u05ee\0\u061c\0\u064a\0\u0678\0\u06a6\0\u06d4"+
    "\0\u0702\0\u0730\0\u075e\0\u078c\0\u07ba\0\u07e8\0\u0816\0\u0844"+
    "\0\u0872\0\u08a0\0\u08ce\0\u08fc\0\u092a\0\u0958\0\u0986\0\u09b4"+
    "\0\u09e2\0\u0a10\0\u0a3e\0\u0a6c\0\u0a3e\0\u0a3e\0\u0a9a\0\u0ac8"+
    "\0\56\0\u0536\0\u0af6\0\u0b24\0\u0b52\0\u0b80\0\u0bae\0\u0bdc"+
    "\0\u0c0a\0\u0c38\0\u0c66\0\u0c94\0\u0cc2\0\u0cf0\0\u0d1e\0\u0d4c"+
    "\0\u0d7a\0\u0da8\0\u0dd6\0\u0dd6\0\u0e04\0\u0e32\0\u0e60\0\u0e8e"+
    "\0\u0ebc\0\u0eea\0\u0f18\0\u0f46\0\u0f74\0\u0fa2\0\u0fd0\0\u0ffe"+
    "\0\u0a3e\0\u102c\0\u105a\0\u1088\0\u10b6\0\u10e4\0\u1112\0\u1140"+
    "\0\u116e\0\u119c\0\u11ca\0\u11f8\0\u1226\0\u1254\0\u1282\0\u12b0"+
    "\0\u12de\0\u130c\0\u133a\0\u1368\0\u1396\0\u13c4\0\u13f2\0\u1420"+
    "\0\u144e\0\u147c\0\u14aa\0\u14d8\0\u1506\0\u1534\0\u1562\0\u1590"+
    "\0\u15be\0\u15ec\0\u161a\0\u1648\0\u1676\0\u16a4\0\u16d2\0\u1700"+
    "\0\u172e\0\u175c\0\u178a\0\u17b8\0\u17e6\0\u1814\0\u1842\0\u1870"+
    "\0\u189e\0\u18cc\0\u18fa\0\u1928\0\56\0\u1956\0\u1984\0\u19b2"+
    "\0\u19e0\0\u1a0e\0\u1a3c\0\u1a6a\0\u1a98\0\u1ac6\0\u1af4\0\u1b22"+
    "\0\u1b50\0\u1b7e\0\u1bac\0\u1bda\0\u1c08\0\u1c36\0\u1c64\0\u1c92"+
    "\0\u1cc0\0\u1cee\0\u1d1c\0\u1d4a\0\u1d78\0\u1da6\0\u1dd4\0\u1e02"+
    "\0\u1e30\0\u1e5e\0\u1e8c\0\u1eba";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\3\1\10"+
    "\1\11\1\12\1\3\1\13\1\3\1\14\1\15\1\3"+
    "\1\16\1\3\1\17\1\20\1\21\1\22\1\23\1\3"+
    "\1\24\2\3\1\25\1\26\1\27\1\2\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\2\44\1\2\57\0\33\3\23\0\1\45"+
    "\1\4\23\45\1\0\5\45\2\0\1\46\20\0\3\3"+
    "\1\47\27\3\23\0\11\3\1\50\21\3\23\0\11\3"+
    "\1\51\21\3\23\0\2\3\1\52\4\3\1\53\3\3"+
    "\1\54\17\3\23\0\15\3\1\55\15\3\23\0\5\3"+
    "\1\56\3\3\1\57\21\3\23\0\7\3\1\60\3\3"+
    "\1\61\17\3\23\0\5\3\1\62\3\3\1\63\21\3"+
    "\23\0\2\3\1\64\2\3\1\65\1\3\1\66\3\3"+
    "\1\67\17\3\23\0\2\3\1\70\4\3\1\71\23\3"+
    "\23\0\6\3\1\50\4\3\1\72\17\3\23\0\2\3"+
    "\1\73\10\3\1\74\17\3\23\0\2\3\1\75\4\3"+
    "\1\76\23\3\23\0\6\3\1\77\24\3\23\0\1\45"+
    "\1\0\23\45\1\0\5\45\23\0\7\3\1\100\23\3"+
    "\23\0\21\3\1\101\11\3\24\0\1\4\112\0\1\102"+
    "\1\0\1\103\54\0\1\104\1\105\55\0\1\106\57\0"+
    "\1\107\1\110\54\0\1\111\65\0\2\44\2\0\33\45"+
    "\23\0\1\45\1\112\23\45\1\0\5\45\2\0\1\113"+
    "\20\0\2\3\1\114\1\3\1\115\7\3\1\116\16\3"+
    "\23\0\3\3\1\117\2\3\1\120\6\3\1\121\15\3"+
    "\23\0\7\3\1\122\23\3\23\0\10\3\1\123\22\3"+
    "\23\0\17\3\1\124\13\3\23\0\10\3\1\125\22\3"+
    "\23\0\13\3\1\126\17\3\23\0\6\3\1\50\14\3"+
    "\1\127\7\3\23\0\4\3\1\115\1\3\1\6\10\3"+
    "\1\130\13\3\23\0\6\3\1\131\24\3\23\0\21\3"+
    "\1\6\11\3\23\0\22\3\1\132\10\3\23\0\3\3"+
    "\1\133\27\3\23\0\23\3\1\50\2\3\1\134\4\3"+
    "\23\0\3\3\1\135\27\3\23\0\23\3\1\136\7\3"+
    "\23\0\10\3\1\6\22\3\23\0\6\3\1\137\6\3"+
    "\1\140\15\3\23\0\15\3\1\141\15\3\23\0\30\3"+
    "\1\142\2\3\23\0\15\3\1\143\1\50\14\3\23\0"+
    "\7\3\1\144\23\3\23\0\4\3\1\145\26\3\23\0"+
    "\5\3\1\146\25\3\23\0\6\3\1\147\24\3\23\0"+
    "\2\3\1\150\30\3\61\0\1\102\1\0\1\151\55\0"+
    "\1\151\54\0\1\104\1\151\14\0\54\107\1\0\1\107"+
    "\1\0\25\152\1\0\13\152\3\0\11\152\1\0\1\45"+
    "\1\113\23\45\1\0\5\45\2\0\1\113\20\0\4\3"+
    "\1\153\26\3\23\0\6\3\1\154\24\3\23\0\7\3"+
    "\1\155\23\3\23\0\17\3\1\156\13\3\23\0\12\3"+
    "\1\157\20\3\23\0\7\3\1\160\1\161\22\3\23\0"+
    "\24\3\1\6\6\3\23\0\6\3\1\162\1\163\23\3"+
    "\23\0\2\3\1\164\30\3\23\0\7\3\1\165\23\3"+
    "\23\0\23\3\1\166\7\3\23\0\2\3\1\167\30\3"+
    "\23\0\7\3\1\170\23\3\23\0\5\3\1\171\25\3"+
    "\23\0\13\3\1\172\17\3\23\0\2\3\1\173\30\3"+
    "\23\0\11\3\1\174\21\3\23\0\2\3\1\175\30\3"+
    "\23\0\15\3\1\176\15\3\23\0\10\3\1\177\22\3"+
    "\23\0\7\3\1\200\23\3\23\0\13\3\1\201\17\3"+
    "\23\0\2\3\1\202\30\3\23\0\15\3\1\203\15\3"+
    "\23\0\17\3\1\204\13\3\23\0\12\3\1\135\20\3"+
    "\23\0\17\3\1\205\13\3\23\0\22\3\1\206\10\3"+
    "\23\0\25\152\1\0\13\152\2\0\1\207\11\152\1\0"+
    "\2\3\1\166\30\3\23\0\7\3\1\210\23\3\23\0"+
    "\6\3\1\164\24\3\23\0\2\3\1\211\30\3\23\0"+
    "\26\3\1\50\2\3\1\50\1\3\23\0\3\3\1\165"+
    "\27\3\23\0\6\3\1\212\13\3\1\213\10\3\23\0"+
    "\11\3\1\214\21\3\23\0\17\3\1\215\13\3\23\0"+
    "\3\3\1\216\27\3\23\0\16\3\1\166\14\3\23\0"+
    "\5\3\1\217\25\3\23\0\4\3\1\220\26\3\23\0"+
    "\3\3\1\221\27\3\23\0\3\3\1\222\27\3\23\0"+
    "\15\3\1\223\15\3\23\0\15\3\1\6\15\3\23\0"+
    "\23\3\1\50\7\3\23\0\4\3\1\216\26\3\23\0"+
    "\2\3\1\224\30\3\23\0\7\3\1\225\23\3\23\0"+
    "\12\3\1\226\20\3\23\0\2\3\1\227\30\3\23\0"+
    "\3\3\1\230\27\3\23\0\10\3\1\231\22\3\23\0"+
    "\11\3\1\217\21\3\23\0\2\3\1\232\17\3\1\233"+
    "\1\234\7\3\23\0\7\3\1\50\23\3\65\0\1\235"+
    "\13\0\15\3\1\236\15\3\23\0\3\3\1\237\27\3"+
    "\23\0\11\3\1\240\21\3\23\0\7\3\1\241\23\3"+
    "\23\0\12\3\1\242\20\3\23\0\2\3\1\217\30\3"+
    "\23\0\5\3\1\50\25\3\23\0\6\3\1\50\24\3"+
    "\23\0\2\3\1\243\30\3\23\0\7\3\1\217\23\3"+
    "\23\0\17\3\1\206\13\3\23\0\7\3\1\244\23\3"+
    "\23\0\3\3\1\166\27\3\23\0\6\3\1\245\24\3"+
    "\23\0\5\3\1\246\25\3\23\0\12\3\1\6\20\3"+
    "\23\0\11\3\1\247\21\3\23\0\6\3\1\206\24\3"+
    "\23\0\22\3\1\250\10\3\23\0\2\3\1\251\30\3"+
    "\23\0\11\3\1\252\21\3\23\0\7\3\1\253\23\3"+
    "\23\0\13\3\1\166\17\3\23\0\20\3\1\166\12\3"+
    "\23\0\15\3\1\254\15\3\23\0\13\3\1\255\17\3"+
    "\23\0\11\3\1\244\21\3\23\0\3\3\1\50\27\3"+
    "\23\0\5\3\1\256\25\3\23\0\12\3\1\50\20\3"+
    "\23\0\23\3\1\257\7\3\23\0\2\3\1\260\30\3"+
    "\23\0\30\3\1\50\2\3\23\0\22\3\1\50\10\3"+
    "\23\0\3\3\1\261\27\3\23\0\7\3\1\262\23\3"+
    "\23\0\4\3\1\215\26\3\23\0\17\3\1\263\13\3"+
    "\23\0\2\3\1\200\30\3\23\0\16\3\1\131\14\3"+
    "\23\0\17\3\1\166\13\3\23\0\3\3\1\264\27\3"+
    "\23\0\13\3\1\265\17\3\23\0\17\3\1\6\13\3"+
    "\23\0\6\3\1\266\24\3\23\0\5\3\1\267\25\3"+
    "\23\0\25\3\1\270\5\3\23\0\5\3\1\271\25\3"+
    "\23\0\4\3\1\272\26\3\23\0\17\3\1\273\13\3"+
    "\23\0\13\3\1\274\17\3\23\0\5\3\1\252\25\3"+
    "\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7912];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\30\1\1\11\2\1\6\11\45\1\1\11"+
    "\40\1\1\0\34\1\1\0\25\1\1\11\37\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;
    public int numero;
 InformacionAnalisis c= new InformacionAnalisis();



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 126) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 11: 
          { numero=yychar; c.linea=yyline; lexeme=yytext(); return Division;
          }
        case 28: break;
        case 2: 
          { numero=yychar; c.linea=yyline; lexeme=yytext(); return Identificador;
          }
        case 29: break;
        case 19: 
          { numero=yychar; c.linea=yyline; lexeme=yytext(); return ERROR2;
          }
        case 30: break;
        case 16: 
          { numero=yychar; c.linea=yyline; lexeme=yytext(); return Corchete_a;
          }
        case 31: break;
        case 8: 
          { numero=yychar; c.linea=yyline; lexeme=yytext(); return Igual;
          }
        case 32: break;
        case 27: 
          { numero=yychar; c.linea=yyline; lexeme=yytext(); return ERROR5;
          }
        case 33: break;
        case 10: 
          { numero=yychar; c.linea=yyline; lexeme=yytext(); return Multiplicacion;
          }
        case 34: break;
        case 12: 
          { numero=yychar; c.linea=yyline; lexeme=yytext(); return Parentesis_a;
          }
        case 35: break;
        case 6: 
          { numero=yychar; c.linea=yyline; lexeme=yytext(); return Menor_que;
          }
        case 36: break;
        case 1: 
          { c.linea=yyline; lexeme=yytext(); return ERROR;
          }
        case 37: break;
        case 7: 
          { numero=yychar; c.linea=yyline; lexeme=yytext(); return Mayor_que;
          }
        case 38: break;
        case 20: 
          { numero=yychar; c.linea=yyline; lexeme=yytext(); return ERROR3;
          }
        case 39: break;
        case 26: 
          { numero=yychar; c.linea=yyline; lexeme=yytext(); return ERROR6;
          }
        case 40: break;
        case 24: 
          { numero=yychar; c.linea=yyline; lexeme=yytext(); return Mayor_igual;
          }
        case 41: break;
        case 4: 
          { numero=yychar; c.linea=yyline; lexeme=yytext(); return Resta;
          }
        case 42: break;
        case 25: 
          { numero=yychar; c.linea=yyline; lexeme=yytext(); return Igual_igual;
          }
        case 43: break;
        case 15: 
          { numero=yychar; c.linea=yyline; lexeme=yytext(); return Llaves_c;
          }
        case 44: break;
        case 23: 
          { numero=yychar; c.linea=yyline; lexeme=yytext(); return Menor_igual;
          }
        case 45: break;
        case 9: 
          { numero=yychar; c.linea=yyline; lexeme=yytext(); return COMA;
          }
        case 46: break;
        case 22: 
          { numero=yychar; c.linea=yyline; lexeme=yytext(); return ERROR4;
          }
        case 47: break;
        case 17: 
          { numero=yychar; c.linea=yyline; lexeme=yytext(); return Corchete_c;
          }
        case 48: break;
        case 18: 
          { /*Ignore*/
          }
        case 49: break;
        case 3: 
          { numero=yychar; c.linea=yyline; lexeme=yytext(); return Numero;
          }
        case 50: break;
        case 5: 
          { numero=yychar; c.linea=yyline; lexeme=yytext(); return Suma;
          }
        case 51: break;
        case 21: 
          { lexeme=yytext(); return Reservadas;
          }
        case 52: break;
        case 13: 
          { numero=yychar; c.linea=yyline; lexeme=yytext(); return Parentesis_c;
          }
        case 53: break;
        case 14: 
          { numero=yychar; c.linea=yyline; lexeme=yytext(); return Llaves_a;
          }
        case 54: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
