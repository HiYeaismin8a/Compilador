/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package codigo;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import java_cup.runtime.Symbol;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Emmanuel Huizar
 */
public class JFprincipal extends javax.swing.JFrame {
    NumeroLinea numerolinea;
    static String resultado3="";
    static ArrayList <String> genErrores = new ArrayList(); 
    JFileChooser seleccionar = new JFileChooser();
    File archivo;
    FileInputStream entrada;
    FileOutputStream salida;
    boolean modificado=false;
    boolean modificado2=false;
    String data[][] = new String[1000][3];
    public String data2[][] = new String[1000][3];
    public String nombreColumnas2 []={"#","lexema"};
    public static String errores[] = new String [100];
    public static int i=0;
    
    
    /**
     * Creates new form JFprincipal
     */
    public JFprincipal() {
        initComponents();
        setIconImage(new ImageIcon(getClass().getResource("/codigo/brote.png")).getImage());
        setTitle("Compilador AgroIT");
        this.setLocationRelativeTo(null);
        this.setBackground(Color.RED);
        numerolinea = new NumeroLinea(txtCodigo);
        numerolineaGrafico.setRowHeaderView(numerolinea);
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        numerolineaGrafico = new javax.swing.JScrollPane();
        txtCodigo = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtResultado = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblLexema = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem10 = new javax.swing.JMenuItem();
        Variable = new javax.swing.JMenuItem();

        jMenuItem7.setText("jMenuItem7");

        jMenuItem8.setText("jMenuItem8");

        jMenuItem9.setText("jMenuItem9");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 255, 204));

        txtCodigo.setColumns(20);
        txtCodigo.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtCodigo.setRows(5);
        txtCodigo.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                txtCodigoInputMethodTextChanged(evt);
            }
        });
        numerolineaGrafico.setViewportView(txtCodigo);

        txtResultado.setBackground(new java.awt.Color(153, 255, 153));
        txtResultado.setColumns(20);
        txtResultado.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        txtResultado.setRows(5);
        jScrollPane1.setViewportView(txtResultado);

        tblLexema.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblLexema);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(numerolineaGrafico, javax.swing.GroupLayout.DEFAULT_SIZE, 855, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 795, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(numerolineaGrafico)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)))
                .addContainerGap())
        );

        jMenu1.setText("Archivo");

        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/abrir (2).png"))); // NOI18N
        jMenuItem1.setText("Abrir");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/agregar-archivo (1).png"))); // NOI18N
        jMenuItem2.setText("Nuevo");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/disquete (1).png"))); // NOI18N
        jMenuItem3.setText("Guardar");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/guardar-como (1).png"))); // NOI18N
        jMenuItem4.setText("Guardar como");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuItem12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/boton-x (1).png"))); // NOI18N
        jMenuItem12.setText("Salir");
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem12ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem12);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Compilar");

        jMenuItem6.setText("Compilar");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem6);

        jMenuItem5.setText("Analisis lexico");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Tablas");

        jMenuItem10.setText("Fija");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem10);

        Variable.setText("Variable");
        Variable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VariableActionPerformed(evt);
            }
        });
        jMenu3.add(Variable);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        abrir();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    
    public String AbrirArchivo(File archivo){
        String documento="";
        try {
            entrada=new FileInputStream(archivo);
            int ascii;
            while((ascii=entrada.read())!=-1) {                
                char caracter=(char)ascii;
                documento+=caracter;
            }
        } catch (Exception e) {
        }
        return documento;
    }
    
    public String guardararchivo(File archivo, String documento){
        String mensaje=null;
        try {
            salida=new FileOutputStream(archivo);
            byte[] bytxt=documento.getBytes();
            salida.write(bytxt);
            
            mensaje="Archivo guaradado";
        } catch (Exception e) {
        }
        return mensaje;
    }
    
    public void guardar_como(){
        if(seleccionar.showDialog(null, "Guardar")==JFileChooser.APPROVE_OPTION){
            archivo=seleccionar.getSelectedFile();
            if (archivo.getName().endsWith("agr")) {
                String Documento=txtCodigo.getText();
                String mensaje=guardararchivo(archivo, Documento);
                if (mensaje!=null) {
                    JOptionPane.showMessageDialog(null, mensaje);
                }else{
                    JOptionPane.showMessageDialog(null, "Archivo no compatible");
                }
            }else{
                JOptionPane.showMessageDialog(null, "extencion de archivo no valido");
            }
        }
    }
    
    public void abrir(){
        if(seleccionar.showDialog(null, "Abrir")==JFileChooser.APPROVE_OPTION){
            archivo=seleccionar.getSelectedFile();
            if(archivo.canRead()){
                if(archivo.getName().endsWith("agr")){
                    String documento=AbrirArchivo(archivo);
                    txtCodigo.setText(documento);                    
                }else{
                    JOptionPane.showMessageDialog(null, "Archivo no es compatible");
                }
            }
        }
        Clear_Table1();
        clear_table2();
        txtResultado.setText("");
        
    }
    
    
    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        
    }//GEN-LAST:event_jMenuItem3ActionPerformed
    
    private void Clear_Table1(){
       tblLexema.setModel(new DefaultTableModel());
    }
    
    private void clear_table2(){
        for(int i=0;i<1000;i++)
            for(int j=0;j<3;j++){
                data[i][j]="";
                data[i][j]="";
                data[i][j]="";
            }
    }
    
    
    
    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        Clear_Table1();
        clear_table2();
        InformacionAnalisis c= new InformacionAnalisis();
        File archivo= new File("Archivo.txt");
        PrintWriter escribir;
        int j=0; 
        
        int i=0;
                      
        try {
            escribir = new PrintWriter(archivo);
            escribir.print(txtCodigo.getText());
            escribir.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(JFprincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try {
            Reader lector = new BufferedReader(new FileReader("archivo.txt"));
            Lexer lexer = new Lexer(lector);
            String resultado="";
            
            String nombreColumnas []={"#","lexema","Comp"};
            

            
            while (true) {

                Tokens tokens = lexer.yylex();
                

                if (tokens==null) {
                    resultado += "\n--------------- Analisis lexico finalizado ---------------";
                    txtResultado.setText(resultado);
                    
                    tblLexema.setModel(new DefaultTableModel(data, nombreColumnas));
                    return;                 
                }

                switch (tokens) {
                    case ERROR:
                        resultado += "Error lexico, linea: "+(c.linea+1)+"\n \t Error: caracter no encontrado '"+lexer.lexeme+"'"+"\n------------------------------------------------------------------------------"+"\n";
                        
                        data[i][0]=(c.linea+1)+"";
                        data[i][1]=lexer.lexeme;
                        data[i][2]=tokens+"";
                        break;
                    case ERROR2:
                        resultado += "Error lexico, linea: "+(c.linea+1)+"\n \t Error: cadena no valida '"+lexer.lexeme+"'"+"\n------------------------------------------------------------------------------"+"\n";
                        data[i][0]=(c.linea+1)+"";
                        data[i][1]=lexer.lexeme;
                        data[i][2]=tokens+"";
                        break;
                    case ERROR3:
                        resultado += "Error lexico, linea: "+(c.linea+1)+"\n \t Error: numero no valido '"+lexer.lexeme+"'"+"\n------------------------------------------------------------------------------"+"\n";
                        data[i][0]=(c.linea+1)+"";
                        data[i][1]=lexer.lexeme;
                        data[i][2]=tokens+"";
                        break;
                    case ERROR5:
                        resultado += resultado += "Error lexico, linea: "+(c.linea+1)+"\n \t Error: falta apertura de comentario '"+"\n------------------------------------------------------------------------------"+"\n";
                        data[i][0]=(c.linea+1)+"";
                        data[i][1]=lexer.lexeme;
                        data[i][2]=tokens+"";
                        break;
                    case ERROR6:
                        resultado += resultado += "Error lexico, linea: "+(c.linea+1)+"\n \t Error: falta cierre de comentario '"+"\n------------------------------------------------------------------------------"+"\n";
                        data[i][0]=(c.linea+1)+"";
                        data[i][1]=lexer.lexeme;
                        data[i][2]=tokens+"";
                        break;
                    case ERROR4:
                        resultado += resultado += "Error lexico, linea: "+(c.linea+1)+"\n \t Error: operador no valido '"+lexer.lexeme+"'"+"\n------------------------------------------------------------------------------"+"\n";
                        data[i][0]=(c.linea+1)+"";
                        data[i][1]=lexer.lexeme;
                        data[i][2]=tokens+"";
                        break;
                    case Identificador:
                        for(int k=0;k<data2.length;k++){
                            //System.out.println(lexer.lexeme+" === "+data[k][1]);
                            if(lexer.lexeme.equals(data2[k][1])){
                                data2[k][0]=(c.linea+1)+"";
                                data2[k][1]=lexer.lexeme;
                                modificado2=true;
                            }
                        }
                        
                        if(modificado2==false){
                            data2[j][0]=(c.linea+1)+"";
                            data2[j][1]=lexer.lexeme;
                            data2[j][2]=data[i-1][1]+"";
                            j++;
                        }
                        
                                             
                        data[i][0]=(c.linea+1)+"";
                        data[i][1]=lexer.lexeme;
                        data[i][2]=tokens+"";
                        
                        modificado2=false;
                        break;
                    case Signo_Agrupacion:
                        data[i][0]=(c.linea+1)+"";
                        data[i][1]=lexer.lexeme;
                        data[i][2]=tokens+"";
                        break;
                    case Llaves_a:
                        data[i][0]=(c.linea+1)+"";
                        data[i][1]=lexer.lexeme;
                        data[i][2]=tokens+"";
                        break;
                    case Llaves_c:
                        data[i][0]=(c.linea+1)+"";
                        data[i][1]=lexer.lexeme;
                        data[i][2]=tokens+"";
                        break;
                    case Igual:
                        data[i][0]=(c.linea+1)+"";
                        data[i][1]=lexer.lexeme;
                        data[i][2]=tokens+"";
                        break;
                    case Igual_igual:
                        data[i][0]=(c.linea+1)+"";
                        data[i][1]=lexer.lexeme;
                        data[i][2]=tokens+"";
                        break;   
                    case Parentesis_a:
                        data[i][0]=(c.linea+1)+"";
                        data[i][1]=lexer.lexeme;
                        data[i][2]=tokens+"";
                        break;
                    case Parentesis_c:
                        data[i][0]=(c.linea+1)+"";
                        data[i][1]=lexer.lexeme;
                        data[i][2]=tokens+"";
                        break;
                    case CADENA:
                        data[i][0]=(c.linea+1)+"";
                        data[i][1]=lexer.lexeme;
                        data[i][2]=tokens+"";
                        break;
                    case COMA:
                        data[i][0]=(c.linea+1)+"";
                        data[i][1]=lexer.lexeme;
                        data[i][2]=tokens+"";
                        break;
                    case Operador_relacional:
                        data[i][0]=(c.linea+1)+"";
                        data[i][1]=lexer.lexeme;
                        data[i][2]=tokens+"";
                        break;
                    case Signo_Puntuacion:
                        data[i][0]=(c.linea+1)+"";
                        data[i][1]=lexer.lexeme;
                        data[i][2]=tokens+"";
                        break;
                    case Numero:
                        data[i][0]=(c.linea+1)+"";
                        data[i][1]=lexer.lexeme;
                        data[i][2]=tokens+"";
                        break;
                    case Reservadas:
                        data[i][0]=(c.linea+1)+"";
                        data[i][1]=lexer.lexeme;
                        data[i][2]=tokens+"";
                        break;
                    case Op_aritmeticos:
                        data[i][0]=(c.linea+1)+"";
                        data[i][1]=lexer.lexeme;
                        data[i][2]=tokens+"";
                    break;
                    case Mayor_igual:
                        data[i][0]=(c.linea+1)+"";
                        data[i][1]=lexer.lexeme;
                        data[i][2]=tokens+"";
                    break;
                    case Menor_igual:
                        data[i][0]=(c.linea+1)+"";
                        data[i][1]=lexer.lexeme;
                        data[i][2]=tokens+"";
                    break;
                    case Mayor_que:
                        data[i][0]=(c.linea+1)+"";
                        data[i][1]=lexer.lexeme;
                        data[i][2]=tokens+"";
                    break;
                    
                    default:
                        resultado += "Token: " + tokens + "\n";
                        break;
                }
                i++;

            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(JFprincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(JFprincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        TablaFija fija = new TablaFija(this, true);
        fija.setVisible(true);
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    public String lexi(){
        String resultado="";
        Clear_Table1();
        clear_table2();
        InformacionAnalisis c= new InformacionAnalisis();
        File archivo= new File("Archivo.txt");
        PrintWriter escribir;
        int j=0; 
        
        int i=0;
                      
        try {
            escribir = new PrintWriter(archivo);
            escribir.print(txtCodigo.getText());
            escribir.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(JFprincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try {
            Reader lector = new BufferedReader(new FileReader("archivo.txt"));
            Lexer lexer = new Lexer(lector);
            
            
            String nombreColumnas []={"#","lexema","Comp"};
            

            
            while (true) {

                Tokens tokens = lexer.yylex();
                

                if (tokens==null) {
                    resultado += "\n";
                    txtResultado.setText(resultado);
                    
                    tblLexema.setModel(new DefaultTableModel(data, nombreColumnas));
                    return resultado;                 
                }

                switch (tokens) {
                    case ERROR:
                        resultado += "Error lexico, linea: "+(c.linea+1)+"\n \t Error: caracter no encontrado '"+lexer.lexeme+"'"+"\n------------------------------------------------------------------------------"+"\n";
                        
                        data[i][0]=(c.linea+1)+"";
                        data[i][1]=lexer.lexeme;
                        data[i][2]=tokens+"";
                        break;
                    case ERROR2:
                        resultado += "Error lexico, linea: "+(c.linea+1)+"\n \t Error: cadena no valida '"+lexer.lexeme+"'"+"\n------------------------------------------------------------------------------"+"\n";
                        data[i][0]=(c.linea+1)+"";
                        data[i][1]=lexer.lexeme;
                        data[i][2]=tokens+"";
                        break;
                    case ERROR3:
                        resultado += "Error lexico, linea: "+(c.linea+1)+"\n \t Error: numero no valido '"+lexer.lexeme+"'"+"\n------------------------------------------------------------------------------"+"\n";
                        data[i][0]=(c.linea+1)+"";
                        data[i][1]=lexer.lexeme;
                        data[i][2]=tokens+"";
                        break;
                    case ERROR5:
                        resultado += resultado += "Error lexico, linea: "+(c.linea+1)+"\n \t Error: falta apertura de comentario '"+"\n------------------------------------------------------------------------------"+"\n";
                        data[i][0]=(c.linea+1)+"";
                        data[i][1]=lexer.lexeme;
                        data[i][2]=tokens+"";
                        break;
                    case ERROR6:
                        resultado += resultado += "Error lexico, linea: "+(c.linea+1)+"\n \t Error: falta cierre de comentario '"+"\n------------------------------------------------------------------------------"+"\n";
                        data[i][0]=(c.linea+1)+"";
                        data[i][1]=lexer.lexeme;
                        data[i][2]=tokens+"";
                        break;
                    case ERROR4:
                        resultado += resultado += "Error lexico, linea: "+(c.linea+1)+"\n \t Error: operador no valido '"+lexer.lexeme+"'"+"\n------------------------------------------------------------------------------"+"\n";
                        data[i][0]=(c.linea+1)+"";
                        data[i][1]=lexer.lexeme;
                        data[i][2]=tokens+"";
                        break;
                    case Identificador:
                        for(int k=0;k<data2.length;k++){
                            //System.out.println(lexer.lexeme+" === "+data[k][1]);
                            if(lexer.lexeme.equals(data2[k][1])){
                                data2[k][0]=(c.linea+1)+"";
                                data2[k][1]=lexer.lexeme;
                                modificado2=true;
                            }
                        }
                        
                        if(modificado2==false){
                            data2[j][0]=(c.linea+1)+"";
                            data2[j][1]=lexer.lexeme;
                            data2[j][2]=data[i-1][1]+"";
                            j++;
                        }
                        
                                             
                        data[i][0]=(c.linea+1)+"";
                        data[i][1]=lexer.lexeme;
                        data[i][2]=tokens+"";
                        
                        modificado2=false;
                        break;
                    case Signo_Agrupacion:
                        data[i][0]=(c.linea+1)+"";
                        data[i][1]=lexer.lexeme;
                        data[i][2]=tokens+"";
                        break;
                    case Llaves_a:
                        data[i][0]=(c.linea+1)+"";
                        data[i][1]=lexer.lexeme;
                        data[i][2]=tokens+"";
                        break;
                    case Llaves_c:
                        data[i][0]=(c.linea+1)+"";
                        data[i][1]=lexer.lexeme;
                        data[i][2]=tokens+"";
                        break;
                    case Igual:
                        data[i][0]=(c.linea+1)+"";
                        data[i][1]=lexer.lexeme;
                        data[i][2]=tokens+"";
                        break;
                    case Igual_igual:
                        data[i][0]=(c.linea+1)+"";
                        data[i][1]=lexer.lexeme;
                        data[i][2]=tokens+"";
                        break;   
                    case Parentesis_a:
                        data[i][0]=(c.linea+1)+"";
                        data[i][1]=lexer.lexeme;
                        data[i][2]=tokens+"";
                        break;
                    case Parentesis_c:
                        data[i][0]=(c.linea+1)+"";
                        data[i][1]=lexer.lexeme;
                        data[i][2]=tokens+"";
                        break;
                    case CADENA:
                        data[i][0]=(c.linea+1)+"";
                        data[i][1]=lexer.lexeme;
                        data[i][2]=tokens+"";
                        break;
                    case COMA:
                        data[i][0]=(c.linea+1)+"";
                        data[i][1]=lexer.lexeme;
                        data[i][2]=tokens+"";
                        break;
                    case Operador_relacional:
                        data[i][0]=(c.linea+1)+"";
                        data[i][1]=lexer.lexeme;
                        data[i][2]=tokens+"";
                        break;
                    case Signo_Puntuacion:
                        data[i][0]=(c.linea+1)+"";
                        data[i][1]=lexer.lexeme;
                        data[i][2]=tokens+"";
                        break;
                    case Numero:
                        data[i][0]=(c.linea+1)+"";
                        data[i][1]=lexer.lexeme;
                        data[i][2]=tokens+"";
                        break;
                    case Reservadas:
                        data[i][0]=(c.linea+1)+"";
                        data[i][1]=lexer.lexeme;
                        data[i][2]=tokens+"";
                        break;
                    case Op_aritmeticos:
                        data[i][0]=(c.linea+1)+"";
                        data[i][1]=lexer.lexeme;
                        data[i][2]=tokens+"";
                    break;
                    case Mayor_igual:
                        data[i][0]=(c.linea+1)+"";
                        data[i][1]=lexer.lexeme;
                        data[i][2]=tokens+"";
                    break;
                    case Menor_igual:
                        data[i][0]=(c.linea+1)+"";
                        data[i][1]=lexer.lexeme;
                        data[i][2]=tokens+"";
                    break;
                    case Mayor_que:
                        data[i][0]=(c.linea+1)+"";
                        data[i][1]=lexer.lexeme;
                        data[i][2]=tokens+"";
                    break;
                    
                    default:
                        break;
                }
                i++;

            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(JFprincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(JFprincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        return resultado;
    }
    
    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        if(modificado==false){
            txtCodigo.setText("");
            Clear_Table1();
            clear_table2();
            txtResultado.setText("");
        }else{
            
        }
        
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        guardar_como();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem12ActionPerformed
        if(modificado==false){
            System.exit(0);
        }else{
            
        }
    }//GEN-LAST:event_jMenuItem12ActionPerformed

    private void txtCodigoInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_txtCodigoInputMethodTextChanged
        modificado=true;
    }//GEN-LAST:event_txtCodigoInputMethodTextChanged

    private void VariableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VariableActionPerformed
        TablaVariable fija = new TablaVariable(this, true);
        fija.setData2(data2);
        fija.setVisible(true);
    }//GEN-LAST:event_VariableActionPerformed
    public static void notificar_er(String cad){
        resultado3+="\n"+cad;
        //errores[i]=cad;
        //i++;
        //System.out.println (cad);
    }
    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        //txtResultado.setText("");
        
        String ST = txtCodigo.getText();
        Sintax s = new Sintax(new codigo.LexerCup(new StringReader(ST)));
        genErrores.clear();
        resultado3=lexi();
        try {
            s.parse();
            
            for(int i=0; i<genErrores.size();i++){
                resultado3+="\n"+genErrores.get(i);
                }
            txtResultado.setText(resultado3+"\n\n-------------- Analisis sintactico finalizado -------------"); 
            txtResultado.setForeground(new Color(25, 111, 61));
            
        } catch (Exception ex) {
            Symbol sym = s.getS();   
            txtResultado.setText(lexi() +"\nError Síntáctico. Linea: " + (sym.right + 1) + ", Cadena: \"" + sym.value + "\"" + "\n-------------- Analisis sintactico finalizado -------------"); 
            txtResultado.setForeground(new Color(25, 111, 61));

        }
        
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFprincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFprincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFprincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFprincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFprincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Variable;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane numerolineaGrafico;
    private javax.swing.JTable tblLexema;
    private javax.swing.JTextArea txtCodigo;
    private javax.swing.JTextArea txtResultado;
    // End of variables declaration//GEN-END:variables
}
