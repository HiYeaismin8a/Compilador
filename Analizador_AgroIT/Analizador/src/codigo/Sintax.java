
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Jun 26 14:31:58 MDT 2021
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Jun 26 14:31:58 MDT 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0104\000\002\002\004\000\002\002\007\000\002\002" +
    "\006\000\002\002\006\000\002\002\005\000\002\002\006" +
    "\000\002\002\006\000\002\002\007\000\002\002\007\000" +
    "\002\002\007\000\002\002\006\000\002\002\005\000\002" +
    "\002\006\000\002\002\007\000\002\002\007\000\002\002" +
    "\006\000\002\002\006\000\002\002\007\000\002\002\007" +
    "\000\002\002\007\000\002\002\007\000\002\002\007\000" +
    "\002\006\003\000\002\006\003\000\002\006\004\000\002" +
    "\006\004\000\002\006\004\000\002\006\004\000\002\006" +
    "\003\000\002\006\003\000\002\016\007\000\002\016\010" +
    "\000\002\016\007\000\002\016\007\000\002\016\007\000" +
    "\002\016\010\000\002\016\010\000\002\016\007\000\002" +
    "\016\007\000\002\016\007\000\002\016\006\000\002\016" +
    "\006\000\002\016\006\000\002\016\006\000\002\016\006" +
    "\000\002\016\007\000\002\016\007\000\002\016\007\000" +
    "\002\016\007\000\002\016\010\000\002\016\010\000\002" +
    "\016\010\000\002\016\007\000\002\016\007\000\002\016" +
    "\007\000\002\016\007\000\002\016\007\000\002\016\010" +
    "\000\002\016\010\000\002\016\010\000\002\016\010\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\003\005\000\002\003\003\000\002\003" +
    "\003\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\017\006\000\002\017\007\000\002\017\007\000" +
    "\002\017\006\000\002\017\007\000\002\017\007\000\002" +
    "\017\006\000\002\017\006\000\002\017\013\000\002\017" +
    "\007\000\002\017\007\000\002\017\007\000\002\017\007" +
    "\000\002\017\007\000\002\015\004\000\002\015\004\000" +
    "\002\015\004\000\002\015\003\000\002\015\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\023\003\000\002\023\003" +
    "\000\002\020\012\000\002\020\012\000\002\020\011\000" +
    "\002\020\010\000\002\020\010\000\002\020\010\000\002" +
    "\020\010\000\002\020\011\000\002\020\011\000\002\020" +
    "\011\000\002\020\011\000\002\020\011\000\002\020\011" +
    "\000\002\020\011\000\002\020\011\000\002\020\011\000" +
    "\002\020\011\000\002\020\011\000\002\020\011\000\002" +
    "\020\021\000\002\020\012\000\002\020\012\000\002\020" +
    "\012\000\002\020\012\000\002\020\012\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\004\006\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\004\000\002\004\004\000\002\004\004" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\011\015\000\002" +
    "\011\014\000\002\011\013\000\002\011\013\000\002\011" +
    "\013\000\002\011\013\000\002\011\013\000\002\011\013" +
    "\000\002\011\013\000\002\011\014\000\002\011\014\000" +
    "\002\011\014\000\002\011\014\000\002\011\014\000\002" +
    "\011\014\000\002\011\014\000\002\011\014\000\002\011" +
    "\014\000\002\011\014\000\002\011\014\000\002\011\014" +
    "\000\002\011\014\000\002\011\014\000\002\011\014\000" +
    "\002\011\014\000\002\011\014\000\002\011\014\000\002" +
    "\011\014\000\002\011\014\000\002\011\014\000\002\011" +
    "\014\000\002\011\014\000\002\011\014\000\002\011\014" +
    "\000\002\011\014\000\002\011\014\000\002\011\014\000" +
    "\002\011\014\000\002\011\014\000\002\011\014\000\002" +
    "\011\015\000\002\011\015\000\002\011\015\000\002\012" +
    "\011\000\002\012\010\000\002\012\010\000\002\012\010" +
    "\000\002\012\010\000\002\012\010\000\002\012\010\000" +
    "\002\012\011\000\002\012\011\000\002\012\011\000\002" +
    "\012\011\000\002\012\011\000\002\012\010\000\002\012" +
    "\010\000\002\012\010\000\002\012\011\000\002\012\011" +
    "\000\002\012\011\000\002\013\012\000\002\013\011\000" +
    "\002\013\011\000\002\013\011\000\002\013\011\000\002" +
    "\013\011\000\002\013\012\000\002\013\012\000\002\013" +
    "\012\000\002\013\012\000\002\013\012\000\002\013\012" +
    "\000\002\010\012\000\002\010\011\000\002\010\010\000" +
    "\002\010\010\000\002\010\010\000\002\010\010\000\002" +
    "\010\010\000\002\010\011\000\002\010\011\000\002\010" +
    "\011\000\002\010\011\000\002\010\011\000\002\010\011" +
    "\000\002\010\011\000\002\010\012\000\002\010\012\000" +
    "\002\010\012\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\021\007\000\002\021" +
    "\010\000\002\021\006\000\002\021\006\000\002\021\007" +
    "\000\002\033\003\000\002\033\003\000\002\014\003\000" +
    "\002\014\003\000\002\026\006\000\002\026\005\000\002" +
    "\026\005\000\002\026\005\000\002\026\005\000\002\026" +
    "\006\000\002\026\006\000\002\026\006\000\002\027\007" +
    "\000\002\027\007\000\002\027\007\000\002\027\006\000" +
    "\002\027\006\000\002\027\006\000\002\027\006\000\002" +
    "\027\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u02d2\000\012\006\005\066\006\067\004\107\010\001" +
    "\002\000\004\107\u02d0\001\002\000\024\005\012\066\014" +
    "\067\011\105\u02b5\106\u02b3\107\u02b8\110\u02b7\111\u02b6\112" +
    "\u02b4\001\002\000\004\107\u02ad\001\002\000\004\002\u02ac" +
    "\001\002\000\010\005\012\066\014\067\011\001\002\000" +
    "\004\066\u02a1\001\002\000\016\066\u0283\105\015\106\023" +
    "\107\u0285\111\017\112\016\001\002\000\004\110\u027f\001" +
    "\002\000\016\066\020\105\015\106\023\107\021\111\017" +
    "\112\016\001\002\000\042\005\uffc4\007\uffc4\013\uffc4\016" +
    "\uffc4\027\uffc4\030\uffc4\036\uffc4\037\uffc4\066\uffc4\067\uffc4" +
    "\105\uffc4\106\uffc4\107\uffc4\110\uffc4\111\uffc4\112\uffc4\001" +
    "\002\000\042\005\uffc1\007\uffc1\013\uffc1\016\uffc1\027\uffc1" +
    "\030\uffc1\036\uffc1\037\uffc1\066\uffc1\067\uffc1\105\uffc1\106" +
    "\uffc1\107\uffc1\110\uffc1\111\uffc1\112\uffc1\001\002\000\042" +
    "\005\uffc2\007\uffc2\013\uffc2\016\uffc2\027\uffc2\030\uffc2\036" +
    "\uffc2\037\uffc2\066\uffc2\067\uffc2\105\uffc2\106\uffc2\107\uffc2" +
    "\110\uffc2\111\uffc2\112\uffc2\001\002\000\014\105\015\106" +
    "\023\107\u0275\111\017\112\016\001\002\000\022\013\024" +
    "\016\030\027\026\030\031\036\033\037\032\066\034\067" +
    "\036\001\002\000\022\013\024\016\030\027\026\030\031" +
    "\036\033\037\032\066\034\067\036\001\002\000\042\005" +
    "\uffc3\007\uffc3\013\uffc3\016\uffc3\027\uffc3\030\uffc3\036\uffc3" +
    "\037\uffc3\066\uffc3\067\uffc3\105\uffc3\106\uffc3\107\uffc3\110" +
    "\uffc3\111\uffc3\112\uffc3\001\002\000\034\012\050\017\054" +
    "\044\057\054\063\066\060\067\064\071\046\101\062\105" +
    "\052\107\u018a\110\u0175\111\u0174\112\u0173\001\002\000\014" +
    "\105\uffbe\106\uffbe\110\uffbe\111\uffbe\112\uffbe\001\002\000" +
    "\006\066\uffa7\067\uffa7\001\002\000\004\110\u026b\001\002" +
    "\000\006\066\uffa5\067\uffa5\001\002\000\006\066\uffa6\067" +
    "\uffa6\001\002\000\006\066\uffa3\067\uffa3\001\002\000\006" +
    "\066\uffa4\067\uffa4\001\002\000\006\066\u0269\107\u01ea\001" +
    "\002\000\014\105\uffbf\106\uffbf\110\uffbf\111\uffbf\112\uffbf" +
    "\001\002\000\006\066\044\107\045\001\002\000\006\066" +
    "\041\067\040\001\002\000\022\013\024\016\030\027\026" +
    "\030\031\036\033\037\032\066\034\067\036\001\002\000" +
    "\022\013\024\016\030\027\026\030\031\036\033\037\032" +
    "\066\034\067\036\001\002\000\014\105\uffc0\106\uffc0\110" +
    "\uffc0\111\uffc0\112\uffc0\001\002\000\014\105\uffbd\106\uffbd" +
    "\110\uffbd\111\uffbd\112\uffbd\001\002\000\022\013\024\016" +
    "\030\027\026\030\031\036\033\037\032\066\034\067\036" +
    "\001\002\000\024\012\050\017\054\044\057\054\063\066" +
    "\060\067\064\071\046\101\062\105\052\001\002\000\016" +
    "\066\u0241\105\u0240\107\124\110\122\111\120\112\117\001" +
    "\002\000\014\052\uff84\107\uff84\110\uff84\111\uff84\112\uff84" +
    "\001\002\000\006\066\311\105\u0237\001\002\000\014\052" +
    "\uff83\107\uff83\110\uff83\111\uff83\112\uff83\001\002\000\032" +
    "\020\333\021\330\023\u0221\045\340\046\332\066\u0222\067" +
    "\337\077\313\100\307\102\303\103\306\104\305\001\002" +
    "\000\014\052\uff85\107\uff85\110\uff85\111\uff85\112\uff85\001" +
    "\002\000\020\020\333\021\330\105\u01f7\107\124\110\122" +
    "\111\120\112\117\001\002\000\004\110\u016d\001\002\000" +
    "\014\052\uff87\107\uff87\110\uff87\111\uff87\112\uff87\001\002" +
    "\000\010\045\340\046\332\105\u0149\001\002\000\024\066" +
    "\311\067\314\077\313\100\307\101\312\102\303\103\306" +
    "\104\305\105\310\001\002\000\014\052\uff82\107\uff82\110" +
    "\uff82\111\uff82\112\uff82\001\002\000\004\067\302\001\002" +
    "\000\016\023\121\105\116\107\124\110\122\111\120\112" +
    "\117\001\002\000\004\101\114\001\002\000\014\052\uff86" +
    "\107\uff86\110\uff86\111\uff86\112\uff86\001\002\000\004\107" +
    "\067\001\002\000\010\013\073\066\072\105\070\001\002" +
    "\000\004\067\112\001\002\000\004\110\111\001\002\000" +
    "\004\105\104\001\002\000\006\067\074\105\075\001\002" +
    "\000\004\106\103\001\002\000\010\066\077\067\076\106" +
    "\100\001\002\000\006\106\102\110\uff09\001\002\000\004" +
    "\106\101\001\002\000\004\110\uff0a\001\002\000\004\110" +
    "\uff07\001\002\000\004\110\uff0d\001\002\000\004\110\uff0b" +
    "\001\002\000\006\066\106\067\105\001\002\000\004\106" +
    "\110\001\002\000\004\106\107\001\002\000\004\110\uff06" +
    "\001\002\000\004\110\uff08\001\002\000\014\052\uff14\107" +
    "\uff14\110\uff14\111\uff14\112\uff14\001\002\000\004\106\113" +
    "\001\002\000\004\110\uff0c\001\002\000\004\067\115\001" +
    "\002\000\014\052\uff7f\107\uff7f\110\uff7f\111\uff7f\112\uff7f" +
    "\001\002\000\010\023\152\066\153\067\151\001\002\000" +
    "\044\012\uff17\017\uff17\020\uff17\021\uff17\023\uff17\044\uff17" +
    "\052\uff17\054\uff17\066\uff17\067\uff17\071\uff17\101\uff17\105" +
    "\uff17\107\uff17\110\uff17\111\uff17\112\uff17\001\002\000\044" +
    "\012\uff18\017\uff18\020\uff18\021\uff18\023\uff18\044\uff18\052" +
    "\uff18\054\uff18\066\uff18\067\uff18\071\uff18\101\uff18\105\uff18" +
    "\107\uff18\110\uff18\111\uff18\112\uff18\001\002\000\004\067" +
    "\142\001\002\000\044\012\uff19\017\uff19\020\uff19\021\uff19" +
    "\023\uff19\044\uff19\052\uff19\054\uff19\066\uff19\067\uff19\071" +
    "\uff19\101\uff19\105\uff19\107\uff19\110\uff19\111\uff19\112\uff19" +
    "\001\002\000\004\023\125\001\002\000\044\012\uff1a\017" +
    "\uff1a\020\uff1a\021\uff1a\023\uff1a\044\uff1a\052\uff1a\054\uff1a" +
    "\066\uff1a\067\uff1a\071\uff1a\101\uff1a\105\uff1a\107\uff1a\110" +
    "\uff1a\111\uff1a\112\uff1a\001\002\000\004\067\126\001\002" +
    "\000\006\025\127\026\131\001\002\000\030\013\uffa1\053" +
    "\uffa1\066\uffa1\067\uffa1\070\uffa1\105\uffa1\106\uffa1\107\uffa1" +
    "\110\uffa1\111\uffa1\112\uffa1\001\002\000\004\070\132\001" +
    "\002\000\030\013\uffa2\053\uffa2\066\uffa2\067\uffa2\070\uffa2" +
    "\105\uffa2\106\uffa2\107\uffa2\110\uffa2\111\uffa2\112\uffa2\001" +
    "\002\000\004\053\133\001\002\000\004\067\134\001\002" +
    "\000\006\025\127\026\131\001\002\000\014\106\137\107" +
    "\124\110\122\111\120\112\117\001\002\000\036\012\050" +
    "\017\054\044\057\052\uff4d\054\063\066\060\067\064\071" +
    "\046\101\062\105\052\107\uff4d\110\uff4d\111\uff4d\112\uff4d" +
    "\001\002\000\036\012\050\017\054\044\057\052\uff4f\054" +
    "\063\066\060\067\064\071\046\101\062\105\052\107\uff4f" +
    "\110\uff4f\111\uff4f\112\uff4f\001\002\000\014\052\uff4c\107" +
    "\uff4c\110\uff4c\111\uff4c\112\uff4c\001\002\000\014\052\uff4a" +
    "\107\uff4a\110\uff4a\111\uff4a\112\uff4a\001\002\000\006\025" +
    "\127\026\131\001\002\000\004\070\144\001\002\000\004" +
    "\053\145\001\002\000\004\067\146\001\002\000\006\025" +
    "\127\026\131\001\002\000\004\106\150\001\002\000\014" +
    "\052\uff71\107\uff71\110\uff71\111\uff71\112\uff71\001\002\000" +
    "\006\025\127\026\131\001\002\000\012\025\127\026\131" +
    "\066\212\067\210\001\002\000\006\066\155\067\154\001" +
    "\002\000\006\025\127\026\131\001\002\000\006\025\127" +
    "\026\131\001\002\000\004\070\157\001\002\000\006\053" +
    "\160\066\161\001\002\000\004\067\165\001\002\000\004" +
    "\066\162\001\002\000\006\025\127\026\131\001\002\000" +
    "\004\106\164\001\002\000\014\052\uff51\107\uff51\110\uff51" +
    "\111\uff51\112\uff51\001\002\000\006\025\127\026\131\001" +
    "\002\000\004\106\167\001\002\000\014\052\uff62\107\uff62" +
    "\110\uff62\111\uff62\112\uff62\001\002\000\004\070\171\001" +
    "\002\000\006\053\172\066\173\001\002\000\006\066\203" +
    "\067\202\001\002\000\006\066\175\067\174\001\002\000" +
    "\006\025\127\026\131\001\002\000\006\025\127\026\131" +
    "\001\002\000\004\106\177\001\002\000\014\052\uff57\107" +
    "\uff57\110\uff57\111\uff57\112\uff57\001\002\000\004\106\201" +
    "\001\002\000\014\052\uff61\107\uff61\110\uff61\111\uff61\112" +
    "\uff61\001\002\000\006\025\127\026\131\001\002\000\006" +
    "\025\127\026\131\001\002\000\004\106\205\001\002\000" +
    "\014\052\uff60\107\uff60\110\uff60\111\uff60\112\uff60\001\002" +
    "\000\004\106\207\001\002\000\014\052\uff6a\107\uff6a\110" +
    "\uff6a\111\uff6a\112\uff6a\001\002\000\006\025\127\026\131" +
    "\001\002\000\004\070\233\001\002\000\006\025\127\026" +
    "\131\001\002\000\004\070\214\001\002\000\006\053\215" +
    "\066\216\001\002\000\006\066\226\067\225\001\002\000" +
    "\006\066\220\067\217\001\002\000\006\025\127\026\131" +
    "\001\002\000\006\025\127\026\131\001\002\000\004\106" +
    "\222\001\002\000\014\052\uff56\107\uff56\110\uff56\111\uff56" +
    "\112\uff56\001\002\000\004\106\224\001\002\000\014\052" +
    "\uff5f\107\uff5f\110\uff5f\111\uff5f\112\uff5f\001\002\000\006" +
    "\025\127\026\131\001\002\000\006\025\127\026\131\001" +
    "\002\000\004\106\230\001\002\000\014\052\uff5e\107\uff5e" +
    "\110\uff5e\111\uff5e\112\uff5e\001\002\000\004\106\232\001" +
    "\002\000\014\052\uff69\107\uff69\110\uff69\111\uff69\112\uff69" +
    "\001\002\000\004\053\234\001\002\000\004\067\235\001" +
    "\002\000\006\025\127\026\131\001\002\000\004\106\237" +
    "\001\002\000\014\052\uff6f\107\uff6f\110\uff6f\111\uff6f\112" +
    "\uff6f\001\002\000\006\053\242\070\241\001\002\000\010" +
    "\053\247\066\250\067\246\001\002\000\004\067\243\001" +
    "\002\000\006\025\127\026\131\001\002\000\004\106\245" +
    "\001\002\000\014\052\uff6e\107\uff6e\110\uff6e\111\uff6e\112" +
    "\uff6e\001\002\000\006\025\127\026\131\001\002\000\012" +
    "\025\127\026\131\066\261\067\257\001\002\000\006\066" +
    "\252\067\251\001\002\000\006\025\127\026\131\001\002" +
    "\000\006\025\127\026\131\001\002\000\004\106\254\001" +
    "\002\000\014\052\uff5d\107\uff5d\110\uff5d\111\uff5d\112\uff5d" +
    "\001\002\000\004\106\256\001\002\000\014\052\uff68\107" +
    "\uff68\110\uff68\111\uff68\112\uff68\001\002\000\006\025\127" +
    "\026\131\001\002\000\004\106\264\001\002\000\006\025" +
    "\127\026\131\001\002\000\004\106\263\001\002\000\014" +
    "\052\uff67\107\uff67\110\uff67\111\uff67\112\uff67\001\002\000" +
    "\014\052\uff6c\107\uff6c\110\uff6c\111\uff6c\112\uff6c\001\002" +
    "\000\014\106\267\107\124\110\122\111\120\112\117\001" +
    "\002\000\036\012\050\017\054\044\057\052\uff4e\054\063" +
    "\066\060\067\064\071\046\101\062\105\052\107\uff4e\110" +
    "\uff4e\111\uff4e\112\uff4e\001\002\000\036\012\050\017\054" +
    "\044\057\052\uff73\054\063\066\060\067\064\071\046\101" +
    "\062\105\052\107\uff73\110\uff73\111\uff73\112\uff73\001\002" +
    "\000\014\052\uff74\107\uff74\110\uff74\111\uff74\112\uff74\001" +
    "\002\000\014\052\uff4b\107\uff4b\110\uff4b\111\uff4b\112\uff4b" +
    "\001\002\000\004\106\273\001\002\000\014\052\uff6d\107" +
    "\uff6d\110\uff6d\111\uff6d\112\uff6d\001\002\000\004\070\275" +
    "\001\002\000\004\053\276\001\002\000\004\067\277\001" +
    "\002\000\006\025\127\026\131\001\002\000\004\106\301" +
    "\001\002\000\014\052\uff70\107\uff70\110\uff70\111\uff70\112" +
    "\uff70\001\002\000\014\052\uff7c\107\uff7c\110\uff7c\111\uff7c" +
    "\112\uff7c\001\002\000\010\066\uff76\067\uff76\106\uff76\001" +
    "\002\000\006\066\325\067\u0148\001\002\000\010\066\uff77" +
    "\067\uff77\106\uff77\001\002\000\010\066\uff75\067\uff75\106" +
    "\uff75\001\002\000\010\066\uff79\067\uff79\106\uff79\001\002" +
    "\000\032\020\333\021\330\023\336\045\340\046\332\066" +
    "\335\067\337\077\313\100\307\102\303\103\306\104\305" +
    "\001\002\000\014\077\313\100\307\102\303\103\306\104" +
    "\305\001\002\000\020\052\uff7a\066\322\067\321\107\uff7a" +
    "\110\uff7a\111\uff7a\112\uff7a\001\002\000\010\066\uff78\067" +
    "\uff78\106\uff78\001\002\000\014\052\uff7b\107\uff7b\110\uff7b" +
    "\111\uff7b\112\uff7b\001\002\000\004\107\316\001\002\000" +
    "\010\013\073\066\072\105\070\001\002\000\004\110\320" +
    "\001\002\000\014\052\uff12\107\uff12\110\uff12\111\uff12\112" +
    "\uff12\001\002\000\036\012\050\017\054\044\057\052\uff80" +
    "\054\063\066\060\067\064\071\046\101\062\105\052\107" +
    "\uff80\110\uff80\111\uff80\112\uff80\001\002\000\014\052\uff7d" +
    "\107\uff7d\110\uff7d\111\uff7d\112\uff7d\001\002\000\014\052" +
    "\uff81\107\uff81\110\uff81\111\uff81\112\uff81\001\002\000\004" +
    "\066\325\001\002\000\004\106\326\001\002\000\012\013" +
    "\uff01\066\uff01\105\uff01\107\uff01\001\002\000\004\066\u0146" +
    "\001\002\000\006\022\uff10\070\uff10\001\002\000\004\070" +
    "\u013d\001\002\000\006\067\uff0e\070\uff0e\001\002\000\006" +
    "\022\uff11\070\uff11\001\002\000\004\070\u0136\001\002\000" +
    "\024\066\u0105\067\u0107\070\u0104\077\313\100\307\101\u0106" +
    "\102\303\103\306\104\305\001\002\000\006\066\345\067" +
    "\344\001\002\000\014\077\313\100\307\102\303\103\306" +
    "\104\305\001\002\000\006\067\uff0f\070\uff0f\001\002\000" +
    "\004\066\342\001\002\000\004\106\343\001\002\000\012" +
    "\013\uff04\066\uff04\105\uff04\107\uff04\001\002\000\006\025" +
    "\127\026\131\001\002\000\006\025\127\026\131\001\002" +
    "\000\004\070\347\001\002\000\006\053\350\066\351\001" +
    "\002\000\006\066\356\067\355\001\002\000\004\066\352" +
    "\001\002\000\006\025\127\026\131\001\002\000\004\106" +
    "\354\001\002\000\014\052\uff52\107\uff52\110\uff52\111\uff52" +
    "\112\uff52\001\002\000\006\025\127\026\131\001\002\000" +
    "\006\025\127\026\131\001\002\000\004\106\360\001\002" +
    "\000\014\052\uff59\107\uff59\110\uff59\111\uff59\112\uff59\001" +
    "\002\000\004\106\362\001\002\000\014\052\uff65\107\uff65" +
    "\110\uff65\111\uff65\112\uff65\001\002\000\004\070\364\001" +
    "\002\000\006\053\365\066\366\001\002\000\006\066\376" +
    "\067\375\001\002\000\006\066\370\067\367\001\002\000" +
    "\006\025\127\026\131\001\002\000\006\025\127\026\131" +
    "\001\002\000\004\106\372\001\002\000\014\052\uff58\107" +
    "\uff58\110\uff58\111\uff58\112\uff58\001\002\000\004\106\374" +
    "\001\002\000\014\052\uff64\107\uff64\110\uff64\111\uff64\112" +
    "\uff64\001\002\000\006\025\127\026\131\001\002\000\006" +
    "\025\127\026\131\001\002\000\004\106\u0100\001\002\000" +
    "\014\052\uff63\107\uff63\110\uff63\111\uff63\112\uff63\001\002" +
    "\000\004\106\u0102\001\002\000\014\052\uff6b\107\uff6b\110" +
    "\uff6b\111\uff6b\112\uff6b\001\002\000\010\066\u0132\067\u0131" +
    "\106\u0133\001\002\000\006\066\u012b\067\u012a\001\002\000" +
    "\006\025\127\026\131\001\002\000\004\066\u0118\001\002" +
    "\000\006\025\127\026\131\001\002\000\004\070\u0109\001" +
    "\002\000\006\053\u010a\066\u010b\001\002\000\006\066\u0113" +
    "\067\u0112\001\002\000\006\066\u010d\067\u010c\001\002\000" +
    "\006\025\127\026\131\001\002\000\006\025\127\026\131" +
    "\001\002\000\004\106\u010f\001\002\000\014\052\uff53\107" +
    "\uff53\110\uff53\111\uff53\112\uff53\001\002\000\004\106\u0111" +
    "\001\002\000\014\052\uff5b\107\uff5b\110\uff5b\111\uff5b\112" +
    "\uff5b\001\002\000\006\025\127\026\131\001\002\000\006" +
    "\025\127\026\131\001\002\000\004\106\u0115\001\002\000" +
    "\014\052\uff5a\107\uff5a\110\uff5a\111\uff5a\112\uff5a\001\002" +
    "\000\004\106\u0117\001\002\000\014\052\uff66\107\uff66\110" +
    "\uff66\111\uff66\112\uff66\001\002\000\004\106\u0119\001\002" +
    "\000\012\013\ufefe\066\ufefe\105\ufefe\107\ufefe\001\002\000" +
    "\004\070\u011b\001\002\000\006\053\u011c\066\u011d\001\002" +
    "\000\006\066\u0125\067\u0124\001\002\000\006\066\u011f\067" +
    "\u011e\001\002\000\006\025\127\026\131\001\002\000\006" +
    "\025\127\026\131\001\002\000\004\106\u0121\001\002\000" +
    "\014\052\uff50\107\uff50\110\uff50\111\uff50\112\uff50\001\002" +
    "\000\004\106\u0123\001\002\000\014\052\uff55\107\uff55\110" +
    "\uff55\111\uff55\112\uff55\001\002\000\006\025\127\026\131" +
    "\001\002\000\006\025\127\026\131\001\002\000\004\106" +
    "\u0127\001\002\000\014\052\uff54\107\uff54\110\uff54\111\uff54" +
    "\112\uff54\001\002\000\004\106\u0129\001\002\000\014\052" +
    "\uff5c\107\uff5c\110\uff5c\111\uff5c\112\uff5c\001\002\000\006" +
    "\025\127\026\131\001\002\000\006\025\127\026\131\001" +
    "\002\000\004\106\u012d\001\002\000\014\052\uff21\107\uff21" +
    "\110\uff21\111\uff21\112\uff21\001\002\000\004\106\u012f\001" +
    "\002\000\036\012\050\017\054\044\057\052\uff24\054\063" +
    "\066\060\067\064\071\046\101\062\105\052\107\uff24\110" +
    "\uff24\111\uff24\112\uff24\001\002\000\014\052\uff2e\107\uff2e" +
    "\110\uff2e\111\uff2e\112\uff2e\001\002\000\004\106\u0135\001" +
    "\002\000\014\013\ufeff\066\ufeff\105\ufeff\106\u0134\107\ufeff" +
    "\001\002\000\012\013\uff00\066\uff00\105\uff00\107\uff00\001" +
    "\002\000\012\013\uff05\066\uff05\105\uff05\107\uff05\001\002" +
    "\000\012\013\uff03\066\uff03\105\uff03\107\uff03\001\002\000" +
    "\006\022\u0137\066\u0138\001\002\000\004\106\u013b\001\002" +
    "\000\004\106\u0139\001\002\000\024\012\050\017\054\044" +
    "\057\054\063\066\060\067\064\071\046\101\062\105\052" +
    "\001\002\000\014\052\uff40\107\uff40\110\uff40\111\uff40\112" +
    "\uff40\001\002\000\024\012\050\017\054\044\057\054\063" +
    "\066\060\067\064\071\046\101\062\105\052\001\002\000" +
    "\014\052\uff42\107\uff42\110\uff42\111\uff42\112\uff42\001\002" +
    "\000\006\066\u013f\067\u013e\001\002\000\006\025\127\026" +
    "\131\001\002\000\006\025\127\026\131\001\002\000\004" +
    "\106\u0141\001\002\000\024\012\050\017\054\044\057\054" +
    "\063\066\060\067\064\071\046\101\062\105\052\001\002" +
    "\000\014\052\uff2f\107\uff2f\110\uff2f\111\uff2f\112\uff2f\001" +
    "\002\000\004\106\u0144\001\002\000\024\012\050\017\054" +
    "\044\057\054\063\066\060\067\064\071\046\101\062\105" +
    "\052\001\002\000\014\052\uff31\107\uff31\110\uff31\111\uff31" +
    "\112\uff31\001\002\000\004\106\u0147\001\002\000\012\013" +
    "\uff02\066\uff02\105\uff02\107\uff02\001\002\000\014\052\uff7e" +
    "\107\uff7e\110\uff7e\111\uff7e\112\uff7e\001\002\000\012\045" +
    "\340\046\332\066\u0152\067\u0150\001\002\000\004\070\u014b" +
    "\001\002\000\004\067\u014c\001\002\000\006\025\127\026" +
    "\131\001\002\000\004\106\u014e\001\002\000\024\012\050" +
    "\017\054\044\057\054\063\066\060\067\064\071\046\101" +
    "\062\105\052\001\002\000\014\052\uff34\107\uff34\110\uff34" +
    "\111\uff34\112\uff34\001\002\000\004\070\u0168\001\002\000" +
    "\006\067\u0158\070\u0159\001\002\000\004\070\u0153\001\002" +
    "\000\004\067\u0154\001\002\000\006\025\127\026\131\001" +
    "\002\000\004\106\u0156\001\002\000\024\012\050\017\054" +
    "\044\057\054\063\066\060\067\064\071\046\101\062\105" +
    "\052\001\002\000\014\052\uff2d\107\uff2d\110\uff2d\111\uff2d" +
    "\112\uff2d\001\002\000\006\025\127\026\131\001\002\000" +
    "\012\025\127\026\131\066\u015c\067\u015a\001\002\000\006" +
    "\025\127\026\131\001\002\000\004\106\u0160\001\002\000" +
    "\006\025\127\026\131\001\002\000\004\106\u015e\001\002" +
    "\000\024\012\050\017\054\044\057\054\063\066\060\067" +
    "\064\071\046\101\062\105\052\001\002\000\014\052\uff30" +
    "\107\uff30\110\uff30\111\uff30\112\uff30\001\002\000\024\012" +
    "\050\017\054\044\057\054\063\066\060\067\064\071\046" +
    "\101\062\105\052\001\002\000\014\052\uff32\107\uff32\110" +
    "\uff32\111\uff32\112\uff32\001\002\000\004\106\u0163\001\002" +
    "\000\036\012\050\017\054\044\057\052\uff36\054\063\066" +
    "\060\067\064\071\046\101\062\105\052\107\uff36\110\uff36" +
    "\111\uff36\112\uff36\001\002\000\014\052\uff37\107\uff37\110" +
    "\uff37\111\uff37\112\uff37\001\002\000\004\106\u0166\001\002" +
    "\000\024\012\050\017\054\044\057\054\063\066\060\067" +
    "\064\071\046\101\062\105\052\001\002\000\014\052\uff33" +
    "\107\uff33\110\uff33\111\uff33\112\uff33\001\002\000\004\067" +
    "\u0169\001\002\000\006\025\127\026\131\001\002\000\004" +
    "\106\u016b\001\002\000\024\012\050\017\054\044\057\054" +
    "\063\066\060\067\064\071\046\101\062\105\052\001\002" +
    "\000\014\052\uff2c\107\uff2c\110\uff2c\111\uff2c\112\uff2c\001" +
    "\002\000\012\013\u0172\052\u016f\066\u0170\067\u016e\001\002" +
    "\000\006\067\u01de\107\u017c\001\002\000\004\067\u01f5\001" +
    "\002\000\004\107\u01ef\001\002\000\014\105\uffb5\106\uffb5" +
    "\110\uffb5\111\uffb5\112\uffb5\001\002\000\034\012\050\017" +
    "\054\044\057\054\063\066\060\067\064\071\046\101\062" +
    "\105\052\107\u0176\110\u0175\111\u0174\112\u0173\001\002\000" +
    "\040\012\uffa8\013\uffa8\017\uffa8\044\uffa8\052\uffa8\054\uffa8" +
    "\066\uffa8\067\uffa8\071\uffa8\101\uffa8\105\uffa8\106\uffa8\110" +
    "\uffa8\111\uffa8\112\uffa8\001\002\000\040\012\uffa9\013\uffa9" +
    "\017\uffa9\044\uffa9\052\uffa9\054\uffa9\066\uffa9\067\uffa9\071" +
    "\uffa9\101\uffa9\105\uffa9\106\uffa9\110\uffa9\111\uffa9\112\uffa9" +
    "\001\002\000\004\107\u01a1\001\002\000\030\012\050\017" +
    "\054\044\057\054\063\066\060\067\064\071\046\101\062" +
    "\105\052\107\u0184\110\u0183\001\002\000\024\012\050\017" +
    "\054\044\057\054\063\066\060\067\064\071\046\101\062" +
    "\105\052\001\002\000\004\110\u0179\001\002\000\010\013" +
    "\u0172\066\u0170\067\u017a\001\002\000\004\107\u017c\001\002" +
    "\000\014\105\uffb7\106\uffb7\110\uffb7\111\uffb7\112\uffb7\001" +
    "\002\000\024\012\050\017\054\044\057\054\063\066\060" +
    "\067\064\071\046\101\062\105\052\001\002\000\004\110" +
    "\u017e\001\002\000\010\013\u0172\066\u0170\067\u017a\001\002" +
    "\000\012\107\u0182\110\u0180\111\u0174\112\u0173\001\002\000" +
    "\024\013\u01a2\066\u01a0\067\u019d\105\uffb4\106\uffb4\107\u01a1" +
    "\110\uffb4\111\uffb4\112\uffb4\001\002\000\010\013\u0189\066" +
    "\u0187\067\u0185\001\002\000\006\107\u0184\110\u0183\001\002" +
    "\000\040\012\uffab\013\uffab\017\uffab\044\uffab\052\uffab\054" +
    "\uffab\066\uffab\067\uffab\071\uffab\101\uffab\105\uffab\106\uffab" +
    "\110\uffab\111\uffab\112\uffab\001\002\000\040\012\uffac\013" +
    "\uffac\017\uffac\044\uffac\052\uffac\054\uffac\066\uffac\067\uffac" +
    "\071\uffac\101\uffac\105\uffac\106\uffac\110\uffac\111\uffac\112" +
    "\uffac\001\002\000\004\107\045\001\002\000\014\105\uffad" +
    "\106\uffad\110\uffad\111\uffad\112\uffad\001\002\000\004\107" +
    "\u01ea\001\002\000\014\105\uffb0\106\uffb0\110\uffb0\111\uffb0" +
    "\112\uffb0\001\002\000\034\012\050\017\054\044\057\054" +
    "\063\066\060\067\064\071\046\101\062\105\052\107\u018a" +
    "\110\u0175\111\u0174\112\u0173\001\002\000\030\012\050\017" +
    "\054\044\057\054\063\066\060\067\064\071\046\101\062" +
    "\105\052\107\u0184\110\u0183\001\002\000\024\012\050\017" +
    "\054\044\057\054\063\066\060\067\064\071\046\101\062" +
    "\105\052\001\002\000\004\110\u018d\001\002\000\012\013" +
    "\u0172\052\u018e\066\u0170\067\u017a\001\002\000\004\067\u018f" +
    "\001\002\000\006\025\127\026\131\001\002\000\014\105" +
    "\uff9d\106\uff9d\110\uff9d\111\uff9d\112\uff9d\001\002\000\012" +
    "\107\u0182\110\u0192\111\u0174\112\u0173\001\002\000\026\013" +
    "\024\052\u01aa\066\u0187\067\u0185\105\uffb4\106\uffb4\107\u01a1" +
    "\110\uffb4\111\uffb4\112\uffb4\001\002\000\012\013\u0189\052" +
    "\u0194\066\u0187\067\u0185\001\002\000\004\067\u0195\001\002" +
    "\000\006\025\127\026\131\001\002\000\010\013\u0198\066" +
    "\u0187\067\u0185\001\002\000\014\105\uff88\106\uff88\110\uff88" +
    "\111\uff88\112\uff88\001\002\000\034\012\050\017\054\044" +
    "\057\054\063\066\060\067\064\071\046\101\062\105\052" +
    "\107\u018a\110\u0175\111\u0174\112\u0173\001\002\000\014\105" +
    "\uff8b\106\uff8b\110\uff8b\111\uff8b\112\uff8b\001\002\000\024" +
    "\012\050\017\054\044\057\054\063\066\060\067\064\071" +
    "\046\101\062\105\052\001\002\000\012\107\u0182\110\u019c" +
    "\111\u0174\112\u0173\001\002\000\026\013\u01a2\052\u019e\066" +
    "\u01a0\067\u019d\105\uffb4\106\uffb4\107\u01a1\110\uffb4\111\uffb4" +
    "\112\uffb4\001\002\000\004\107\u01da\001\002\000\004\067" +
    "\u01d7\001\002\000\014\105\uffaf\106\uffaf\110\uffaf\111\uffaf" +
    "\112\uffaf\001\002\000\004\107\u01ca\001\002\000\040\012" +
    "\uffaa\013\uffaa\017\uffaa\044\uffaa\052\uffaa\054\uffaa\066\uffaa" +
    "\067\uffaa\071\uffaa\101\uffaa\105\uffaa\106\uffaa\110\uffaa\111" +
    "\uffaa\112\uffaa\001\002\000\034\012\050\017\054\044\057" +
    "\054\063\066\060\067\064\071\046\101\062\105\052\107" +
    "\u01a3\110\u0175\111\u0174\112\u0173\001\002\000\030\012\050" +
    "\017\054\044\057\054\063\066\060\067\064\071\046\101" +
    "\062\105\052\107\u0184\110\u0183\001\002\000\024\012\050" +
    "\017\054\044\057\054\063\066\060\067\064\071\046\101" +
    "\062\105\052\001\002\000\004\110\u01a6\001\002\000\004" +
    "\052\u018e\001\002\000\012\107\u0182\110\u01a8\111\u0174\112" +
    "\u0173\001\002\000\006\052\u01aa\107\u01a1\001\002\000\004" +
    "\052\u0194\001\002\000\004\067\u01ab\001\002\000\006\025" +
    "\127\026\131\001\002\000\022\013\u01a2\066\u01a0\067\u019d" +
    "\105\uff8f\106\uff8f\110\uff8f\111\uff8f\112\uff8f\001\002\000" +
    "\014\105\uff8a\106\uff8a\110\uff8a\111\uff8a\112\uff8a\001\002" +
    "\000\014\052\u01af\107\u0182\110\u01b0\111\u0174\112\u0173\001" +
    "\002\000\004\067\u01c8\001\002\000\012\052\u01b8\066\u01b9" +
    "\067\u01b7\107\u01a1\001\002\000\004\052\u01b2\001\002\000" +
    "\004\067\u01b3\001\002\000\006\025\127\026\131\001\002" +
    "\000\022\013\024\066\u0187\067\u0185\105\uff8e\106\uff8e\110" +
    "\uff8e\111\uff8e\112\uff8e\001\002\000\014\105\uff89\106\uff89" +
    "\110\uff89\111\uff89\112\uff89\001\002\000\014\105\uff8c\106" +
    "\uff8c\110\uff8c\111\uff8c\112\uff8c\001\002\000\010\025\127" +
    "\026\131\067\u01c5\001\002\000\012\025\127\026\131\066" +
    "\u01c0\067\u01be\001\002\000\006\066\u01bb\067\u01ba\001\002" +
    "\000\006\025\127\026\131\001\002\000\006\025\127\026" +
    "\131\001\002\000\014\105\uff94\106\uff94\110\uff94\111\uff94" +
    "\112\uff94\001\002\000\014\105\uff98\106\uff98\110\uff98\111" +
    "\uff98\112\uff98\001\002\000\006\025\127\026\131\001\002" +
    "\000\014\105\uff9a\106\uff9a\110\uff9a\111\uff9a\112\uff9a\001" +
    "\002\000\006\025\127\026\131\001\002\000\014\105\uff97" +
    "\106\uff97\110\uff97\111\uff97\112\uff97\001\002\000\022\013" +
    "\024\066\u0187\067\u0185\105\uff9e\106\uff9e\110\uff9e\111\uff9e" +
    "\112\uff9e\001\002\000\014\105\uff9f\106\uff9f\110\uff9f\111" +
    "\uff9f\112\uff9f\001\002\000\014\105\uffa0\106\uffa0\110\uffa0" +
    "\111\uffa0\112\uffa0\001\002\000\006\025\127\026\131\001" +
    "\002\000\014\105\uff9b\106\uff9b\110\uff9b\111\uff9b\112\uff9b" +
    "\001\002\000\014\105\uff91\106\uff91\110\uff91\111\uff91\112" +
    "\uff91\001\002\000\006\025\127\026\131\001\002\000\014" +
    "\105\uff9c\106\uff9c\110\uff9c\111\uff9c\112\uff9c\001\002\000" +
    "\024\012\050\017\054\044\057\054\063\066\060\067\064" +
    "\071\046\101\062\105\052\001\002\000\004\110\u01cc\001" +
    "\002\000\006\052\u01cd\066\u01ce\001\002\000\006\066\u01d4" +
    "\067\u01d3\001\002\000\006\066\u01d0\067\u01cf\001\002\000" +
    "\006\025\127\026\131\001\002\000\006\025\127\026\131" +
    "\001\002\000\014\105\uff93\106\uff93\110\uff93\111\uff93\112" +
    "\uff93\001\002\000\014\105\uff96\106\uff96\110\uff96\111\uff96" +
    "\112\uff96\001\002\000\006\025\127\026\131\001\002\000" +
    "\006\025\127\026\131\001\002\000\014\105\uff95\106\uff95" +
    "\110\uff95\111\uff95\112\uff95\001\002\000\014\105\uff99\106" +
    "\uff99\110\uff99\111\uff99\112\uff99\001\002\000\006\025\127" +
    "\026\131\001\002\000\022\013\024\066\u0187\067\u0185\105" +
    "\uff8f\106\uff8f\110\uff8f\111\uff8f\112\uff8f\001\002\000\014" +
    "\105\uff8d\106\uff8d\110\uff8d\111\uff8d\112\uff8d\001\002\000" +
    "\024\012\050\017\054\044\057\054\063\066\060\067\064" +
    "\071\046\101\062\105\052\001\002\000\004\110\u01dc\001" +
    "\002\000\006\052\u016f\067\u01dd\001\002\000\004\067\u01de" +
    "\001\002\000\006\025\127\026\131\001\002\000\014\105" +
    "\uff90\106\uff90\110\uff90\111\uff90\112\uff90\001\002\000\014" +
    "\105\uffb2\106\uffb2\110\uffb2\111\uffb2\112\uffb2\001\002\000" +
    "\014\052\u01af\107\u0182\110\u01e2\111\u0174\112\u0173\001\002" +
    "\000\026\013\024\052\u01b8\066\u01e8\067\u01e6\105\uffba\106" +
    "\uffba\107\u01a1\110\uffba\111\uffba\112\uffba\001\002\000\024" +
    "\013\024\052\u01b2\066\u0187\067\u0185\105\uffb3\106\uffb3\110" +
    "\uffb3\111\uffb3\112\uffb3\001\002\000\014\105\uffae\106\uffae" +
    "\110\uffae\111\uffae\112\uffae\001\002\000\014\105\uffb1\106" +
    "\uffb1\110\uffb1\111\uffb1\112\uffb1\001\002\000\012\025\127" +
    "\026\131\067\u01c5\107\045\001\002\000\014\105\uffb8\106" +
    "\uffb8\110\uffb8\111\uffb8\112\uffb8\001\002\000\010\066\u01bb" +
    "\067\u01ba\107\u01ea\001\002\000\014\105\uffb9\106\uffb9\110" +
    "\uffb9\111\uffb9\112\uffb9\001\002\000\024\012\050\017\054" +
    "\044\057\054\063\066\060\067\064\071\046\101\062\105" +
    "\052\001\002\000\004\110\u01ec\001\002\000\012\013\u0172" +
    "\052\u01cd\066\u01ed\067\u017a\001\002\000\010\066\u01d0\067" +
    "\u01cf\107\u01ef\001\002\000\014\105\uffb6\106\uffb6\110\uffb6" +
    "\111\uffb6\112\uffb6\001\002\000\024\012\050\017\054\044" +
    "\057\054\063\066\060\067\064\071\046\101\062\105\052" +
    "\001\002\000\004\110\u01f1\001\002\000\010\013\u0172\066" +
    "\u0170\067\u017a\001\002\000\012\107\u0182\110\u01f3\111\u0174" +
    "\112\u0173\001\002\000\024\013\024\066\u0187\067\u0185\105" +
    "\uffba\106\uffba\107\u01a1\110\uffba\111\uffba\112\uffba\001\002" +
    "\000\022\013\024\066\u0187\067\u0185\105\uffb3\106\uffb3\110" +
    "\uffb3\111\uffb3\112\uffb3\001\002\000\006\025\127\026\131" +
    "\001\002\000\014\105\uff92\106\uff92\110\uff92\111\uff92\112" +
    "\uff92\001\002\000\012\020\333\021\330\066\u0206\067\u0205" +
    "\001\002\000\006\020\333\021\330\001\002\000\004\070" +
    "\u01fa\001\002\000\004\022\u01fb\001\002\000\004\106\u01fc" +
    "\001\002\000\024\012\050\017\054\044\057\054\063\066" +
    "\060\067\064\071\046\101\062\105\052\001\002\000\014" +
    "\052\uff46\107\uff46\110\uff46\111\uff46\112\uff46\001\002\000" +
    "\004\070\u01ff\001\002\000\004\022\u0200\001\002\000\014" +
    "\106\u0202\107\124\110\122\111\120\112\117\001\002\000" +
    "\036\012\050\017\054\044\057\052\uff3b\054\063\066\060" +
    "\067\064\071\046\101\062\105\052\107\uff3b\110\uff3b\111" +
    "\uff3b\112\uff3b\001\002\000\036\012\050\017\054\044\057" +
    "\052\uff3d\054\063\066\060\067\064\071\046\101\062\105" +
    "\052\107\uff3d\110\uff3d\111\uff3d\112\uff3d\001\002\000\014" +
    "\052\uff3a\107\uff3a\110\uff3a\111\uff3a\112\uff3a\001\002\000" +
    "\014\052\uff38\107\uff38\110\uff38\111\uff38\112\uff38\001\002" +
    "\000\004\070\u021b\001\002\000\004\070\u0217\001\002\000" +
    "\006\022\u0209\070\u0208\001\002\000\010\022\u020c\066\u020d" +
    "\106\u020e\001\002\000\004\106\u020a\001\002\000\024\012" +
    "\050\017\054\044\057\054\063\066\060\067\064\071\046" +
    "\101\062\105\052\001\002\000\014\052\uff45\107\uff45\110" +
    "\uff45\111\uff45\112\uff45\001\002\000\036\012\050\017\054" +
    "\044\057\054\063\066\060\067\064\071\046\101\062\105" +
    "\052\106\u0212\107\124\110\122\111\120\112\117\001\002" +
    "\000\004\106\u0210\001\002\000\024\012\050\017\054\044" +
    "\057\054\063\066\060\067\064\071\046\101\062\105\052" +
    "\001\002\000\014\052\uff44\107\uff44\110\uff44\111\uff44\112" +
    "\uff44\001\002\000\024\012\050\017\054\044\057\054\063" +
    "\066\060\067\064\071\046\101\062\105\052\001\002\000" +
    "\014\052\uff41\107\uff41\110\uff41\111\uff41\112\uff41\001\002" +
    "\000\036\012\050\017\054\044\057\052\uff48\054\063\066" +
    "\060\067\064\071\046\101\062\105\052\107\uff48\110\uff48" +
    "\111\uff48\112\uff48\001\002\000\036\012\050\017\054\044" +
    "\057\052\uff3c\054\063\066\060\067\064\071\046\101\062" +
    "\105\052\107\uff3c\110\uff3c\111\uff3c\112\uff3c\001\002\000" +
    "\014\052\uff43\107\uff43\110\uff43\111\uff43\112\uff43\001\002" +
    "\000\014\052\uff39\107\uff39\110\uff39\111\uff39\112\uff39\001" +
    "\002\000\014\052\uff49\107\uff49\110\uff49\111\uff49\112\uff49" +
    "\001\002\000\004\022\u0218\001\002\000\004\106\u0219\001" +
    "\002\000\024\012\050\017\054\044\057\054\063\066\060" +
    "\067\064\071\046\101\062\105\052\001\002\000\014\052" +
    "\uff3f\107\uff3f\110\uff3f\111\uff3f\112\uff3f\001\002\000\004" +
    "\022\u021c\001\002\000\004\106\u021d\001\002\000\024\012" +
    "\050\017\054\044\057\054\063\066\060\067\064\071\046" +
    "\101\062\105\052\001\002\000\014\052\uff3e\107\uff3e\110" +
    "\uff3e\111\uff3e\112\uff3e\001\002\000\004\070\u0232\001\002" +
    "\000\004\070\u022e\001\002\000\004\067\u0227\001\002\000" +
    "\020\070\u0223\077\313\100\307\101\u0106\102\303\103\306" +
    "\104\305\001\002\000\004\067\u0224\001\002\000\006\025" +
    "\127\026\131\001\002\000\004\106\u0226\001\002\000\014" +
    "\052\uff29\107\uff29\110\uff29\111\uff29\112\uff29\001\002\000" +
    "\006\025\127\026\131\001\002\000\004\070\u0229\001\002" +
    "\000\004\053\u022a\001\002\000\004\067\u022b\001\002\000" +
    "\006\025\127\026\131\001\002\000\004\106\u022d\001\002" +
    "\000\014\052\uff72\107\uff72\110\uff72\111\uff72\112\uff72\001" +
    "\002\000\004\022\u022f\001\002\000\004\106\u0230\001\002" +
    "\000\024\012\050\017\054\044\057\054\063\066\060\067" +
    "\064\071\046\101\062\105\052\001\002\000\014\052\uff47" +
    "\107\uff47\110\uff47\111\uff47\112\uff47\001\002\000\004\067" +
    "\u0233\001\002\000\006\025\127\026\131\001\002\000\004" +
    "\106\u0235\001\002\000\024\012\050\017\054\044\057\054" +
    "\063\066\060\067\064\071\046\101\062\105\052\001\002" +
    "\000\014\052\uff35\107\uff35\110\uff35\111\uff35\112\uff35\001" +
    "\002\000\020\066\u023f\067\337\077\313\100\307\102\303" +
    "\103\306\104\305\001\002\000\012\013\073\066\072\105" +
    "\070\107\u023a\001\002\000\004\110\u023e\001\002\000\010" +
    "\013\073\066\072\105\070\001\002\000\004\110\u023c\001" +
    "\002\000\036\012\050\017\054\044\057\052\uff16\054\063" +
    "\066\060\067\064\071\046\101\062\105\052\107\uff16\110" +
    "\uff16\111\uff16\112\uff16\001\002\000\014\052\uff15\107\uff15" +
    "\110\uff15\111\uff15\112\uff15\001\002\000\014\052\uff13\107" +
    "\uff13\110\uff13\111\uff13\112\uff13\001\002\000\016\077\313" +
    "\100\307\101\u0106\102\303\103\306\104\305\001\002\000" +
    "\010\066\u0251\067\u024f\070\u0250\001\002\000\004\070\u024b" +
    "\001\002\000\004\066\u0243\001\002\000\004\070\u0244\001" +
    "\002\000\004\067\u0245\001\002\000\006\025\127\026\131" +
    "\001\002\000\014\106\u0248\107\124\110\122\111\120\112" +
    "\117\001\002\000\036\012\050\017\054\044\057\052\uff1e" +
    "\054\063\066\060\067\064\071\046\101\062\105\052\107" +
    "\uff1e\110\uff1e\111\uff1e\112\uff1e\001\002\000\036\012\050" +
    "\017\054\044\057\052\uff20\054\063\066\060\067\064\071" +
    "\046\101\062\105\052\107\uff20\110\uff20\111\uff20\112\uff20" +
    "\001\002\000\014\052\uff1d\107\uff1d\110\uff1d\111\uff1d\112" +
    "\uff1d\001\002\000\014\052\uff1b\107\uff1b\110\uff1b\111\uff1b" +
    "\112\uff1b\001\002\000\004\067\u024c\001\002\000\006\025" +
    "\127\026\131\001\002\000\004\106\u024e\001\002\000\014" +
    "\052\uff28\107\uff28\110\uff28\111\uff28\112\uff28\001\002\000" +
    "\004\070\u0264\001\002\000\004\067\u0261\001\002\000\006" +
    "\067\u0253\070\u0252\001\002\000\012\025\127\026\131\066" +
    "\u0258\067\u0256\001\002\000\006\025\127\026\131\001\002" +
    "\000\004\106\u0255\001\002\000\014\052\uff26\107\uff26\110" +
    "\uff26\111\uff26\112\uff26\001\002\000\006\025\127\026\131" +
    "\001\002\000\004\106\u025b\001\002\000\006\025\127\026" +
    "\131\001\002\000\004\106\u025a\001\002\000\014\052\uff23" +
    "\107\uff23\110\uff23\111\uff23\112\uff23\001\002\000\014\052" +
    "\uff25\107\uff25\110\uff25\111\uff25\112\uff25\001\002\000\014" +
    "\106\u025e\107\124\110\122\111\120\112\117\001\002\000" +
    "\036\012\050\017\054\044\057\052\uff1f\054\063\066\060" +
    "\067\064\071\046\101\062\105\052\107\uff1f\110\uff1f\111" +
    "\uff1f\112\uff1f\001\002\000\036\012\050\017\054\044\057" +
    "\052\uff2a\054\063\066\060\067\064\071\046\101\062\105" +
    "\052\107\uff2a\110\uff2a\111\uff2a\112\uff2a\001\002\000\014" +
    "\052\uff2b\107\uff2b\110\uff2b\111\uff2b\112\uff2b\001\002\000" +
    "\014\052\uff1c\107\uff1c\110\uff1c\111\uff1c\112\uff1c\001\002" +
    "\000\006\025\127\026\131\001\002\000\004\106\u0263\001" +
    "\002\000\014\052\uff27\107\uff27\110\uff27\111\uff27\112\uff27" +
    "\001\002\000\004\067\u0265\001\002\000\006\025\127\026" +
    "\131\001\002\000\004\106\u0267\001\002\000\014\052\uff22" +
    "\107\uff22\110\uff22\111\uff22\112\uff22\001\002\000\014\105" +
    "\uffbb\106\uffbb\110\uffbb\111\uffbb\112\uffbb\001\002\000\022" +
    "\013\024\016\030\027\026\030\031\036\033\037\032\066" +
    "\034\067\036\001\002\000\014\105\uffbc\106\uffbc\110\uffbc" +
    "\111\uffbc\112\uffbc\001\002\000\026\005\012\007\uffd9\066" +
    "\014\067\011\105\uffd9\106\uffd9\107\uffd9\110\uffd9\111\uffd9" +
    "\112\uffd9\001\002\000\020\007\uffcd\105\uffcd\106\uffcd\107" +
    "\uffcd\110\uffcd\111\uffcd\112\uffcd\001\002\000\024\012\050" +
    "\017\054\044\057\054\063\066\060\067\064\071\046\101" +
    "\062\105\052\001\002\000\012\107\u0182\110\u026f\111\u0174" +
    "\112\u0173\001\002\000\026\013\u01a2\052\u01aa\066\u01a0\067" +
    "\u019d\105\uffb4\106\uffb4\107\u01a1\110\uffb4\111\uffb4\112\uffb4" +
    "\001\002\000\014\105\015\106\023\110\u0271\111\017\112" +
    "\016\001\002\000\010\005\012\066\014\067\011\001\002" +
    "\000\026\005\012\007\uffd8\066\014\067\011\105\uffd8\106" +
    "\uffd8\107\uffd8\110\uffd8\111\uffd8\112\uffd8\001\002\000\020" +
    "\007\uffcc\105\uffcc\106\uffcc\107\uffcc\110\uffcc\111\uffcc\112" +
    "\uffcc\001\002\000\020\007\uffe1\105\uffe1\106\uffe1\107\uffe1" +
    "\110\uffe1\111\uffe1\112\uffe1\001\002\000\022\013\024\016" +
    "\030\027\026\030\031\036\033\037\032\066\034\067\036" +
    "\001\002\000\022\013\024\016\030\027\026\030\031\036" +
    "\033\037\032\066\034\067\036\001\002\000\004\110\u0278" +
    "\001\002\000\026\005\012\007\uffd4\066\014\067\011\105" +
    "\uffd4\106\uffd4\107\uffd4\110\uffd4\111\uffd4\112\uffd4\001\002" +
    "\000\020\007\uffc8\105\uffc8\106\uffc8\107\uffc8\110\uffc8\111" +
    "\uffc8\112\uffc8\001\002\000\014\105\015\106\023\110\u027b" +
    "\111\017\112\016\001\002\000\010\005\012\066\014\067" +
    "\011\001\002\000\026\005\012\007\uffd3\066\014\067\011" +
    "\105\uffd3\106\uffd3\107\uffd3\110\uffd3\111\uffd3\112\uffd3\001" +
    "\002\000\020\007\uffc7\105\uffc7\106\uffc7\107\uffc7\110\uffc7" +
    "\111\uffc7\112\uffc7\001\002\000\020\007\uffde\105\uffde\106" +
    "\uffde\107\uffde\110\uffde\111\uffde\112\uffde\001\002\000\012" +
    "\002\ufff6\007\u0281\066\u0282\067\u0280\001\002\000\004\002" +
    "\ufff2\001\002\000\004\002\ufffc\001\002\000\004\002\ufff7" +
    "\001\002\000\036\013\024\016\030\027\026\030\031\036" +
    "\033\037\032\066\034\067\036\105\015\106\023\107\u028f" +
    "\110\u028e\111\017\112\016\001\002\000\022\013\024\016" +
    "\030\027\026\030\031\036\033\037\032\066\034\067\036" +
    "\001\002\000\022\013\024\016\030\027\026\030\031\036" +
    "\033\037\032\066\034\067\036\001\002\000\014\105\015" +
    "\106\023\110\u0287\111\017\112\016\001\002\000\010\005" +
    "\012\066\014\067\011\001\002\000\026\005\012\007\uffd6" +
    "\066\014\067\011\105\uffd6\106\uffd6\107\uffd6\110\uffd6\111" +
    "\uffd6\112\uffd6\001\002\000\020\007\uffca\105\uffca\106\uffca" +
    "\107\uffca\110\uffca\111\uffca\112\uffca\001\002\000\020\007" +
    "\uffe0\105\uffe0\106\uffe0\107\uffe0\110\uffe0\111\uffe0\112\uffe0" +
    "\001\002\000\004\110\u028c\001\002\000\026\005\012\007" +
    "\uffd7\066\014\067\011\105\uffd7\106\uffd7\107\uffd7\110\uffd7" +
    "\111\uffd7\112\uffd7\001\002\000\020\007\uffcb\105\uffcb\106" +
    "\uffcb\107\uffcb\110\uffcb\111\uffcb\112\uffcb\001\002\000\022" +
    "\013\024\016\030\027\026\030\031\036\033\037\032\066" +
    "\034\067\036\001\002\000\022\013\024\016\030\027\026" +
    "\030\031\036\033\037\032\066\034\067\036\001\002\000" +
    "\022\013\024\016\030\027\026\030\031\036\033\037\032" +
    "\066\034\067\036\001\002\000\014\105\015\106\023\110" +
    "\u0292\111\017\112\016\001\002\000\010\005\012\066\014" +
    "\067\011\001\002\000\026\005\012\007\uffd5\066\014\067" +
    "\011\105\uffd5\106\uffd5\107\uffd5\110\uffd5\111\uffd5\112\uffd5" +
    "\001\002\000\020\007\uffc9\105\uffc9\106\uffc9\107\uffc9\110" +
    "\uffc9\111\uffc9\112\uffc9\001\002\000\020\007\uffdf\105\uffdf" +
    "\106\uffdf\107\uffdf\110\uffdf\111\uffdf\112\uffdf\001\002\000" +
    "\014\105\015\106\023\110\u0297\111\017\112\016\001\002" +
    "\000\026\005\012\007\uffdc\066\014\067\011\105\uffdc\106" +
    "\uffdc\107\uffdc\110\uffdc\111\uffdc\112\uffdc\001\002\000\026" +
    "\005\012\007\uffda\066\014\067\011\105\uffda\106\uffda\107" +
    "\uffda\110\uffda\111\uffda\112\uffda\001\002\000\020\007\uffce" +
    "\105\uffce\106\uffce\107\uffce\110\uffce\111\uffce\112\uffce\001" +
    "\002\000\020\007\uffd0\105\uffd0\106\uffd0\107\uffd0\110\uffd0" +
    "\111\uffd0\112\uffd0\001\002\000\004\110\u029c\001\002\000" +
    "\026\005\012\007\uffe3\066\014\067\011\105\uffe3\106\uffe3" +
    "\107\uffe3\110\uffe3\111\uffe3\112\uffe3\001\002\000\020\007" +
    "\uffe2\105\uffe2\106\uffe2\107\uffe2\110\uffe2\111\uffe2\112\uffe2" +
    "\001\002\000\012\105\015\106\023\111\017\112\016\001" +
    "\002\000\026\005\012\007\uffdb\066\014\067\011\105\uffdb" +
    "\106\uffdb\107\uffdb\110\uffdb\111\uffdb\112\uffdb\001\002\000" +
    "\020\007\uffcf\105\uffcf\106\uffcf\107\uffcf\110\uffcf\111\uffcf" +
    "\112\uffcf\001\002\000\014\105\015\106\023\107\u02a3\111" +
    "\017\112\016\001\002\000\022\013\024\016\030\027\026" +
    "\030\031\036\033\037\032\066\034\067\036\001\002\000" +
    "\022\013\024\016\030\027\026\030\031\036\033\037\032" +
    "\066\034\067\036\001\002\000\014\105\015\106\023\110" +
    "\u02a5\111\017\112\016\001\002\000\010\005\012\066\014" +
    "\067\011\001\002\000\026\005\012\007\uffd1\066\014\067" +
    "\011\105\uffd1\106\uffd1\107\uffd1\110\uffd1\111\uffd1\112\uffd1" +
    "\001\002\000\020\007\uffc5\105\uffc5\106\uffc5\107\uffc5\110" +
    "\uffc5\111\uffc5\112\uffc5\001\002\000\020\007\uffdd\105\uffdd" +
    "\106\uffdd\107\uffdd\110\uffdd\111\uffdd\112\uffdd\001\002\000" +
    "\004\110\u02aa\001\002\000\026\005\012\007\uffd2\066\014" +
    "\067\011\105\uffd2\106\uffd2\107\uffd2\110\uffd2\111\uffd2\112" +
    "\uffd2\001\002\000\020\007\uffc6\105\uffc6\106\uffc6\107\uffc6" +
    "\110\uffc6\111\uffc6\112\uffc6\001\002\000\004\002\001\001" +
    "\002\000\010\005\012\066\014\067\011\001\002\000\004" +
    "\110\u02af\001\002\000\012\002\ufff5\007\u02b1\066\u02b2\067" +
    "\u02b0\001\002\000\004\002\uffef\001\002\000\004\002\ufffa" +
    "\001\002\000\004\002\ufff8\001\002\000\012\005\uffea\007" +
    "\uffea\066\uffea\067\uffea\001\002\000\012\005\uffe4\007\uffe4" +
    "\066\uffe4\067\uffe4\001\002\000\012\005\uffeb\007\uffeb\066" +
    "\uffeb\067\uffeb\001\002\000\012\005\uffe5\007\uffe5\066\uffe5" +
    "\067\uffe5\001\002\000\006\107\u02c4\110\u02c3\001\002\000" +
    "\014\005\012\066\014\067\011\107\u02c0\110\u02bf\001\002" +
    "\000\006\007\u02c5\110\u02c6\001\002\000\010\005\012\066" +
    "\014\067\011\001\002\000\016\105\u02b5\106\u02b3\107\u02be" +
    "\110\u02bc\111\u02b6\112\u02b4\001\002\000\010\007\u02c2\107" +
    "\u02c4\110\u02c3\001\002\000\004\007\u02c1\001\002\000\006" +
    "\107\u02c0\110\u02bf\001\002\000\012\005\uffe8\007\uffe8\066" +
    "\uffe8\067\uffe8\001\002\000\012\005\uffe9\007\uffe9\066\uffe9" +
    "\067\uffe9\001\002\000\004\002\uffec\001\002\000\004\002" +
    "\uffee\001\002\000\012\005\uffe6\007\uffe6\066\uffe6\067\uffe6" +
    "\001\002\000\012\005\uffe7\007\uffe7\066\uffe7\067\uffe7\001" +
    "\002\000\004\002\ufffd\001\002\000\004\007\u02c7\001\002" +
    "\000\004\002\uffff\001\002\000\020\007\u02c9\105\u02b5\106" +
    "\u02b3\107\u02be\110\u02ca\111\u02b6\112\u02b4\001\002\000\004" +
    "\002\ufffe\001\002\000\016\002\ufffb\007\u02ce\066\u02cf\067" +
    "\u02cd\107\u02c4\110\u02c3\001\002\000\004\007\u02cc\001\002" +
    "\000\004\002\uffed\001\002\000\004\002\ufff4\001\002\000" +
    "\004\002\000\001\002\000\004\002\ufff9\001\002\000\010" +
    "\005\012\066\014\067\011\001\002\000\004\110\u02d2\001" +
    "\002\000\010\002\ufff1\066\u02d4\067\u02d3\001\002\000\004" +
    "\002\ufff3\001\002\000\004\002\ufff0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u02d2\000\004\002\006\001\001\000\002\001\001\000" +
    "\006\006\u02b9\016\u02b8\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\012\001\001\000\002\001\001\000" +
    "\004\025\u0283\001\001\000\002\001\001\000\004\025\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\u0275\001\001\000\012\003\u026f\017\034" +
    "\020\024\031\036\001\001\000\012\003\026\017\034\020" +
    "\024\031\036\001\001\000\002\001\001\000\024\004\055" +
    "\010\060\011\064\012\052\013\046\015\u026c\021\050\027" +
    "\065\030\u018b\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\042\017\034\020\024\031\036\001\001\000\012\003\041" +
    "\017\034\020\024\031\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\u0267\017\034\020\024\031\036" +
    "\001\001\000\022\004\055\010\060\011\064\012\052\013" +
    "\046\021\050\027\065\030\054\001\001\000\004\007\u0241" +
    "\001\001\000\002\001\001\000\004\027\u0237\001\001\000" +
    "\002\001\001\000\010\014\u021e\022\326\033\u021f\001\001" +
    "\000\002\001\001\000\006\007\u01f7\033\u01f8\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\u0149\001\001" +
    "\000\006\022\303\027\314\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\122\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\134\001\001\000\004\007" +
    "\135\001\001\000\022\004\055\010\060\011\064\012\052" +
    "\013\046\021\050\027\065\030\140\001\001\000\022\004" +
    "\055\010\060\011\064\012\052\013\046\021\050\027\065" +
    "\030\137\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\273\001\001\000\004" +
    "\023\210\001\001\000\002\001\001\000\004\023\167\001" +
    "\001\000\004\023\155\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\162\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\165\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\177\001\001\000\004\023\175\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\205\001\001\000\004\023" +
    "\203\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\237\001\001\000" +
    "\002\001\001\000\004\023\212\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\222\001\001\000\004\023\220\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\230\001\001\000\004\023\226\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\235\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\243\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\271\001\001\000\004\023\257\001\001\000\002" +
    "\001\001\000\004\023\254\001\001\000\004\023\252\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\264\001\001\000\002\001" +
    "\001\000\004\023\261\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\265\001\001\000" +
    "\022\004\055\010\060\011\064\012\052\013\046\021\050" +
    "\027\065\030\270\001\001\000\022\004\055\010\060\011" +
    "\064\012\052\013\046\021\050\027\065\030\267\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\277\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\014\330\022\326\033\333\001\001\000\004" +
    "\022\323\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\316\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\004\055\010" +
    "\060\011\064\012\052\013\046\021\050\027\065\030\322" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\u0102\001\001" +
    "\000\002\001\001\000\004\022\340\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\362\001\001\000\004\023\345\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\352\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\360\001\001\000\004\023\356" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\372\001" +
    "\001\000\004\023\370\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\u0100\001\001\000\004\023\376\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\u0119\001\001" +
    "\000\002\001\001\000\004\023\u0107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\u010f\001\001\000\004\023\u010d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\u0115\001\001\000\004\023\u0113\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\u0121\001\001\000\004\023\u011f\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\u0127\001\001\000\004\023" +
    "\u0125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\u012d\001\001\000" +
    "\004\023\u012b\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\004\055\010\060\011\064\012" +
    "\052\013\046\021\050\027\065\030\u012f\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\004\055\010" +
    "\060\011\064\012\052\013\046\021\050\027\065\030\u0139" +
    "\001\001\000\002\001\001\000\022\004\055\010\060\011" +
    "\064\012\052\013\046\021\050\027\065\030\u013b\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\u0142\001" +
    "\001\000\004\023\u013f\001\001\000\002\001\001\000\022" +
    "\004\055\010\060\011\064\012\052\013\046\021\050\027" +
    "\065\030\u0141\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\004\055\010\060\011\064\012\052\013\046\021" +
    "\050\027\065\030\u0144\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\u0150\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\u014c\001\001\000\002\001\001\000\022\004\055\010" +
    "\060\011\064\012\052\013\046\021\050\027\065\030\u014e" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\u0154" +
    "\001\001\000\002\001\001\000\022\004\055\010\060\011" +
    "\064\012\052\013\046\021\050\027\065\030\u0156\001\001" +
    "\000\002\001\001\000\004\023\u0164\001\001\000\004\023" +
    "\u015a\001\001\000\004\023\u0161\001\001\000\002\001\001" +
    "\000\004\023\u015c\001\001\000\002\001\001\000\022\004" +
    "\055\010\060\011\064\012\052\013\046\021\050\027\065" +
    "\030\u015e\001\001\000\002\001\001\000\022\004\055\010" +
    "\060\011\064\012\052\013\046\021\050\027\065\030\u0160" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\004" +
    "\055\010\060\011\064\012\052\013\046\021\050\027\065" +
    "\030\u0163\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\004\055\010\060\011\064\012\052\013\046\021\050" +
    "\027\065\030\u0166\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\u0169\001\001\000\002\001\001\000\022" +
    "\004\055\010\060\011\064\012\052\013\046\021\050\027" +
    "\065\030\u016b\001\001\000\002\001\001\000\004\017\u0170" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\004\055\010\060\011\064" +
    "\012\052\013\046\015\u0176\021\050\027\065\030\u0177\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\004\055\010\060\011\064\012\052\013\046\021" +
    "\050\027\065\030\u01f1\001\001\000\022\004\055\010\060" +
    "\011\064\012\052\013\046\021\050\027\065\030\u017e\001" +
    "\001\000\002\001\001\000\004\017\u017a\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\004\055\010\060\011" +
    "\064\012\052\013\046\021\050\027\065\030\u017c\001\001" +
    "\000\002\001\001\000\004\017\u0170\001\001\000\004\015" +
    "\u0180\001\001\000\004\020\u019e\001\001\000\006\017\u0187" +
    "\020\u0185\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\004\055\010\060\011" +
    "\064\012\052\013\046\015\u018a\021\050\027\065\030\u018b" +
    "\001\001\000\022\004\055\010\060\011\064\012\052\013" +
    "\046\021\050\027\065\030\u01e0\001\001\000\022\004\055" +
    "\010\060\011\064\012\052\013\046\021\050\027\065\030" +
    "\u0190\001\001\000\002\001\001\000\004\017\u017a\001\001" +
    "\000\002\001\001\000\004\023\u018f\001\001\000\002\001" +
    "\001\000\004\015\u0192\001\001\000\006\017\u01df\020\u019e" +
    "\001\001\000\006\017\u0187\020\u0185\001\001\000\002\001" +
    "\001\000\004\023\u0195\001\001\000\006\017\u0198\020\u0196" +
    "\001\001\000\002\001\001\000\024\004\055\010\060\011" +
    "\064\012\052\013\046\015\u0199\021\050\027\065\030\u018b" +
    "\001\001\000\002\001\001\000\022\004\055\010\060\011" +
    "\064\012\052\013\046\021\050\027\065\030\u019a\001\001" +
    "\000\004\015\u0192\001\001\000\004\020\u019e\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\004\055\010\060\011" +
    "\064\012\052\013\046\015\u01a3\021\050\027\065\030\u01a4" +
    "\001\001\000\022\004\055\010\060\011\064\012\052\013" +
    "\046\021\050\027\065\030\u01ad\001\001\000\022\004\055" +
    "\010\060\011\064\012\052\013\046\021\050\027\065\030" +
    "\u01a6\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\u01a8\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\u01ab\001\001\000\004\020\u01ac" +
    "\001\001\000\002\001\001\000\004\015\u01b0\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\u01b3\001\001\000\006\017\u01b5\020" +
    "\u01b4\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\u01c5\001\001\000\004\023\u01be\001\001\000\002\001" +
    "\001\000\004\023\u01bc\001\001\000\004\023\u01bb\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\u01c1\001" +
    "\001\000\002\001\001\000\004\023\u01c0\001\001\000\002" +
    "\001\001\000\006\017\u01c3\020\u01c2\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\u01c6\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\u01c8\001\001\000" +
    "\002\001\001\000\022\004\055\010\060\011\064\012\052" +
    "\013\046\021\050\027\065\030\u01ca\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\u01d1\001\001\000\004\023\u01d0\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\u01d5\001\001" +
    "\000\004\023\u01d4\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\u01d7\001\001\000\006\017\u01d8\020\u01ac" +
    "\001\001\000\002\001\001\000\022\004\055\010\060\011" +
    "\064\012\052\013\046\021\050\027\065\030\u01da\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\u01de\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\u01e2\001\001\000\006\017\u01e8\020\u01e6\001" +
    "\001\000\006\017\u01e4\020\u01e3\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\u01c5\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\004\055" +
    "\010\060\011\064\012\052\013\046\021\050\027\065\030" +
    "\u01ea\001\001\000\002\001\001\000\004\017\u01ed\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\004\055\010" +
    "\060\011\064\012\052\013\046\021\050\027\065\030\u01ef" +
    "\001\001\000\002\001\001\000\004\017\u01ed\001\001\000" +
    "\004\015\u01f3\001\001\000\006\017\u01e8\020\u01e6\001\001" +
    "\000\006\017\u01e4\020\u01e3\001\001\000\004\023\u01f5\001" +
    "\001\000\002\001\001\000\004\033\u0206\001\001\000\004" +
    "\033\u01fd\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\004\055\010\060\011\064\012\052" +
    "\013\046\021\050\027\065\030\u01fc\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\u0200" +
    "\001\001\000\022\004\055\010\060\011\064\012\052\013" +
    "\046\021\050\027\065\030\u0203\001\001\000\022\004\055" +
    "\010\060\011\064\012\052\013\046\021\050\027\065\030" +
    "\u0202\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\004\055\010\060\011\064" +
    "\012\052\013\046\021\050\027\065\030\u020a\001\001\000" +
    "\002\001\001\000\024\004\055\007\u0212\010\060\011\064" +
    "\012\052\013\046\021\050\027\065\030\u0213\001\001\000" +
    "\002\001\001\000\022\004\055\010\060\011\064\012\052" +
    "\013\046\021\050\027\065\030\u020e\001\001\000\002\001" +
    "\001\000\022\004\055\010\060\011\064\012\052\013\046" +
    "\021\050\027\065\030\u0210\001\001\000\002\001\001\000" +
    "\022\004\055\010\060\011\064\012\052\013\046\021\050" +
    "\027\065\030\u0215\001\001\000\022\004\055\010\060\011" +
    "\064\012\052\013\046\021\050\027\065\030\u0214\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\004\055\010\060" +
    "\011\064\012\052\013\046\021\050\027\065\030\u0219\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\004\055\010\060\011\064\012\052\013\046\021" +
    "\050\027\065\030\u021d\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\u0102\001\001\000\002\001\001\000\004\023\u0224\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\u0227\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\u022b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\004\055" +
    "\010\060\011\064\012\052\013\046\021\050\027\065\030" +
    "\u0230\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\u0233\001\001\000\002\001\001\000\022\004\055\010" +
    "\060\011\064\012\052\013\046\021\050\027\065\030\u0235" +
    "\001\001\000\002\001\001\000\004\022\326\001\001\000" +
    "\004\026\u0238\001\001\000\002\001\001\000\004\026\u023a" +
    "\001\001\000\002\001\001\000\022\004\055\010\060\011" +
    "\064\012\052\013\046\021\050\027\065\030\u023c\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\u0102\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\u0245\001" +
    "\001\000\004\007\u0246\001\001\000\022\004\055\010\060" +
    "\011\064\012\052\013\046\021\050\027\065\030\u0249\001" +
    "\001\000\022\004\055\010\060\011\064\012\052\013\046" +
    "\021\050\027\065\030\u0248\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\u024c\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\u0256\001\001" +
    "\000\004\023\u0253\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\u025b\001\001\000\002\001\001\000\004" +
    "\023\u0258\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\u025c\001\001\000\022\004\055" +
    "\010\060\011\064\012\052\013\046\021\050\027\065\030" +
    "\u025f\001\001\000\022\004\055\010\060\011\064\012\052" +
    "\013\046\021\050\027\065\030\u025e\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\u0261\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\u0265\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\003\u0269\017\034\020\024\031\036\001" +
    "\001\000\002\001\001\000\004\016\u026b\001\001\000\002" +
    "\001\001\000\022\004\055\010\060\011\064\012\052\013" +
    "\046\021\050\027\065\030\u026d\001\001\000\004\015\u0192" +
    "\001\001\000\004\020\u019e\001\001\000\004\025\u0271\001" +
    "\001\000\004\016\u0273\001\001\000\004\016\u0272\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\u0279\017" +
    "\034\020\024\031\036\001\001\000\012\003\u0276\017\034" +
    "\020\024\031\036\001\001\000\002\001\001\000\004\016" +
    "\u0278\001\001\000\002\001\001\000\004\025\u027b\001\001" +
    "\000\004\016\u027d\001\001\000\004\016\u027c\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\u0290\017\034\020\024\025\u028f\031\036\001\001\000\012" +
    "\003\u028a\017\034\020\024\031\036\001\001\000\012\003" +
    "\u0285\017\034\020\024\031\036\001\001\000\004\025\u0287" +
    "\001\001\000\004\016\u0289\001\001\000\004\016\u0288\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\u028c\001\001\000\002\001\001\000\012\003" +
    "\u029d\017\034\020\024\031\036\001\001\000\012\003\u029a" +
    "\017\034\020\024\031\036\001\001\000\012\003\u0295\017" +
    "\034\020\024\031\036\001\001\000\004\025\u0292\001\001" +
    "\000\004\016\u0294\001\001\000\004\016\u0293\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\u0297\001\001" +
    "\000\004\016\u0299\001\001\000\004\016\u0298\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\u029c\001\001\000\002\001\001\000\004\025\u029e\001" +
    "\001\000\004\016\u029f\001\001\000\002\001\001\000\004" +
    "\025\u02a1\001\001\000\012\003\u02a8\017\034\020\024\031" +
    "\036\001\001\000\012\003\u02a3\017\034\020\024\031\036" +
    "\001\001\000\004\025\u02a5\001\001\000\004\016\u02a7\001" +
    "\001\000\004\016\u02a6\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\u02aa\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\u02ad\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\u02c7\001\001\000\002\001\001\000\004" +
    "\016\u02ba\001\001\000\004\006\u02bc\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\u02ca\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\u02d0\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {


    JFprincipal A=new JFprincipal();    

  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // CONDICION ::= Parentesis_a Identificador Igual Identificador Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta operador no valido");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // CONDICION ::= Parentesis_a Identificador COMPROBACION Identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: se espera un parentesis de cierre ')' ");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // CONDICION ::= Parentesis_a Identificador COMPROBACION Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: se espera in identificador despues de comprobacion ");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // CONDICION ::= Identificador COMPROBACION Identificador Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: se espera un parentesis de apertura '(' ");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // CONDICION ::= Parentesis_a COMPROBACION Identificador Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: se espera identificador antes de comprobacion");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // CONDICION ::= Parentesis_a Identificador COMPROBACION Numero Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // CONDICION ::= Parentesis_a Numero COMPROBACION Identificador Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // CONDICION ::= Parentesis_a Identificador COMPROBACION Identificador Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // RUTINA_COM ::= Identificador Parentesis_a Identificador Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta revise manual 35");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RUTINA_COM",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // RUTINA_COM ::= Rutina Parentesis_a Identificador Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: se espera un numero dentro de los parentesis");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RUTINA_COM",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // RUTINA_COM ::= Identificador Parentesis_a Numero Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta revise manual 34");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RUTINA_COM",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // RUTINA_COM ::= Rutina Parentesis_a Numero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta se espera parentesis ')' ");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RUTINA_COM",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // RUTINA_COM ::= Rutina Parentesis_a Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: se espera un numero dentro de los parentesis");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RUTINA_COM",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // RUTINA_COM ::= Rutina Numero Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta se espera parentesis '('");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RUTINA_COM",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // RUTINA_COM ::= Parentesis_a Numero Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: se espera palabra reservada rutina ");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RUTINA_COM",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // RUTINA_COM ::= Rutina Parentesis_a Numero Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RUTINA_COM",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // TIPO_FERT ::= Fertsol 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_FERT",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // TIPO_FERT ::= Fertliq 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_FERT",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // SINO ::= No 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SINO",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // SINO ::= Si 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SINO",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // COMPROB ::= Identificador CONDICION Llaves_a RUTINA_COM Llaves_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta revise manual 33");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPROB",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // COMPROB ::= Comprobar CONDICION RUTINA_COM Llaves_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta se espera llaves '{' ");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPROB",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // COMPROB ::= CONDICION Llaves_a RUTINA_COM Llaves_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: se espera la palabra reservada comprobar");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPROB",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // COMPROB ::= Comprobar CONDICION Llaves_a RUTINA_COM Llaves_c SENTENCIA_RUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPROB",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // COMPROB ::= Comprobar CONDICION Llaves_a RUTINA_COM Llaves_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPROB",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // LLAVES_ERROR ::= Corchete_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta operador no valido");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAVES_ERROR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // LLAVES_ERROR ::= Corchete_a 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta operador no valido");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAVES_ERROR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // LLAVES_ERROR ::= Llaves_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta operador no valido");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAVES_ERROR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // LLAVES_ERROR ::= Llaves_a 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta operador no valido");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAVES_ERROR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // ASIG_MUSICA ::= Reproducir LLAVES_ERROR Identificador COMA Numero TIPO_HORA LLAVES_ERROR SENTENCIA_RUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_MUSICA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // ASIG_MUSICA ::= Reproducir Parentesis_a Identificador COMA Numero TIPO_HORA LLAVES_ERROR SENTENCIA_RUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_MUSICA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // ASIG_MUSICA ::= Reproducir LLAVES_ERROR Identificador COMA Numero TIPO_HORA Parentesis_c SENTENCIA_RUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_MUSICA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // ASIG_MUSICA ::= Reproducir LLAVES_ERROR Identificador COMA Numero TIPO_HORA LLAVES_ERROR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_MUSICA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // ASIG_MUSICA ::= Reproducir Parentesis_a Identificador COMA Numero TIPO_HORA LLAVES_ERROR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_MUSICA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // ASIG_MUSICA ::= Reproducir LLAVES_ERROR Identificador COMA Numero TIPO_HORA Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_MUSICA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // ASIG_MUSICA ::= Identificador Parentesis_a Identificador COMA Identificador TIPO_HORA Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta revise manual 32 ");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_MUSICA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // ASIG_MUSICA ::= Reproducir Parentesis_a Numero COMA Numero TIPO_HORA Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta revise manual 31 ");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_MUSICA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // ASIG_MUSICA ::= Reproducir Parentesis_a Identificador COMA Identificador TIPO_HORA Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta revise manual 30");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_MUSICA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // ASIG_MUSICA ::= Identificador Parentesis_a Identificador COMA Numero TIPO_HORA Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta revise manual 29");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_MUSICA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // ASIG_MUSICA ::= Reproducir Parentesis_a Identificador COMA TIPO_HORA Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: se espera un numero despues de la coma");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_MUSICA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // ASIG_MUSICA ::= Reproducir Parentesis_a Identificador Numero TIPO_HORA Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: se espera una coma despues del identificador");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_MUSICA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // ASIG_MUSICA ::= Reproducir Parentesis_a COMA Numero TIPO_HORA Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: se espera un identificador antes de la coma");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_MUSICA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // ASIG_MUSICA ::= Reproducir Identificador COMA Numero TIPO_HORA Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta se espera parentesis '(' ");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_MUSICA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // ASIG_MUSICA ::= Parentesis_a Identificador COMA Numero TIPO_HORA Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: se espera palabra reservada reproducir");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_MUSICA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // ASIG_MUSICA ::= Reproducir Parentesis_a Identificador COMA Numero TIPO_HORA Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_MUSICA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // ASIG_MUSICA ::= Reproducir Parentesis_a Identificador COMA Numero TIPO_HORA Parentesis_c SENTENCIA_RUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_MUSICA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // ASIG_FERTILIZANTE ::= Fertilizante Parentesis_a Numero COMA Numero TIPO_HORA Parentesis_c SENTENCIA_RUT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta revise manual 28");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_FERTILIZANTE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // ASIG_FERTILIZANTE ::= Fertilizante Parentesis_a Identificador COMA Numero TIPO_HORA Parentesis_c SENTENCIA_RUT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta revise manual 27");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_FERTILIZANTE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // ASIG_FERTILIZANTE ::= Identificador Parentesis_a Identificador COMA Numero TIPO_HORA Parentesis_c SENTENCIA_RUT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Despues de parentesis que abre se espera fertliq o fertsol");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_FERTILIZANTE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // ASIG_FERTILIZANTE ::= Identificador Parentesis_a TIPO_FERT COMA Identificador TIPO_HORA Parentesis_c SENTENCIA_RUT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta revise manual 26");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_FERTILIZANTE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // ASIG_FERTILIZANTE ::= Fertilizante Parentesis_a TIPO_FERT COMA Identificador TIPO_HORA Parentesis_c SENTENCIA_RUT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: se espera un numero en vez de un identificador");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_FERTILIZANTE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // ASIG_FERTILIZANTE ::= Identificador Parentesis_a TIPO_FERT COMA Numero TIPO_HORA Parentesis_c SENTENCIA_RUT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta se espera 'fertilizante' ");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_FERTILIZANTE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // ASIG_FERTILIZANTE ::= Fertilizante Parentesis_a TIPO_FERT COMA TIPO_HORA Parentesis_c SENTENCIA_RUT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: se espera un numero antes del tipo de hora");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_FERTILIZANTE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // ASIG_FERTILIZANTE ::= Fertilizante Parentesis_a TIPO_FERT Numero TIPO_HORA Parentesis_c SENTENCIA_RUT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: se espera coma despues del tipo fertilizante ");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_FERTILIZANTE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // ASIG_FERTILIZANTE ::= Fertilizante TIPO_FERT COMA Numero TIPO_HORA Parentesis_c SENTENCIA_RUT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta se espera parentesis '(' ");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_FERTILIZANTE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // ASIG_FERTILIZANTE ::= Parentesis_a TIPO_FERT COMA Numero TIPO_HORA Parentesis_c SENTENCIA_RUT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: se espera la palabra reservada fertilizante ");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_FERTILIZANTE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // ASIG_FERTILIZANTE ::= Fertilizante Parentesis_a TIPO_FERT COMA Numero TIPO_HORA Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_FERTILIZANTE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // ASIG_FERTILIZANTE ::= Fertilizante Parentesis_a TIPO_FERT COMA Numero TIPO_HORA Parentesis_c SENTENCIA_RUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_FERTILIZANTE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // ASIG_LUMINOCIDAD ::= Luminosidad LLAVES_ERROR SINO COMA Complemento LLAVES_ERROR SENTENCIA_RUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_LUMINOCIDAD",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // ASIG_LUMINOCIDAD ::= Luminosidad Parentesis_a SINO COMA Complemento LLAVES_ERROR SENTENCIA_RUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_LUMINOCIDAD",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // ASIG_LUMINOCIDAD ::= Luminosidad LLAVES_ERROR SINO COMA Complemento Parentesis_c SENTENCIA_RUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_LUMINOCIDAD",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // ASIG_LUMINOCIDAD ::= Luminosidad LLAVES_ERROR SINO COMA Complemento LLAVES_ERROR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_LUMINOCIDAD",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // ASIG_LUMINOCIDAD ::= Luminosidad Parentesis_a SINO COMA Complemento LLAVES_ERROR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_LUMINOCIDAD",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // ASIG_LUMINOCIDAD ::= Luminosidad LLAVES_ERROR SINO COMA Complemento Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_LUMINOCIDAD",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // ASIG_LUMINOCIDAD ::= Luminosidad Parentesis_a Numero COMA Complemento Parentesis_c SENTENCIA_RUT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta revise manual 17");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_LUMINOCIDAD",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // ASIG_LUMINOCIDAD ::= Luminosidad Parentesis_a Identificador COMA Complemento Parentesis_c SENTENCIA_RUT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta revise manual 16");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_LUMINOCIDAD",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // ASIG_LUMINOCIDAD ::= Identificador Parentesis_a SINO COMA Identificador Parentesis_c SENTENCIA_RUT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta revise manual 15");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_LUMINOCIDAD",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // ASIG_LUMINOCIDAD ::= Luminosidad Parentesis_a SINO COMA Identificador Parentesis_c SENTENCIA_RUT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta se espera complemento");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_LUMINOCIDAD",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // ASIG_LUMINOCIDAD ::= Identificador Parentesis_a SINO COMA Complemento Parentesis_c SENTENCIA_RUT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta se espera luminosidad");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_LUMINOCIDAD",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // ASIG_LUMINOCIDAD ::= Luminosidad Parentesis_a SINO COMA Complemento SENTENCIA_RUT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error:  Estructura incorrecta se espera llave '}'  ");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_LUMINOCIDAD",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // ASIG_LUMINOCIDAD ::= Luminosidad Parentesis_a SINO COMA Parentesis_c SENTENCIA_RUT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: se espera complemento despues de la ',' ");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_LUMINOCIDAD",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // ASIG_LUMINOCIDAD ::= Luminosidad Parentesis_a SINO Complemento Parentesis_c SENTENCIA_RUT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: se espera un ',' antes de complemento");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_LUMINOCIDAD",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // ASIG_LUMINOCIDAD ::= Luminosidad SINO COMA Complemento Parentesis_c SENTENCIA_RUT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta se espera llave '{' ");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_LUMINOCIDAD",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // ASIG_LUMINOCIDAD ::= Parentesis_a SINO COMA Complemento Parentesis_c SENTENCIA_RUT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: se espera palabra reservada luminosidad");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_LUMINOCIDAD",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // ASIG_LUMINOCIDAD ::= Luminosidad Parentesis_a SINO COMA Complemento Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_LUMINOCIDAD",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // ASIG_LUMINOCIDAD ::= Luminosidad Parentesis_a SINO COMA Complemento Parentesis_c SENTENCIA_RUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_LUMINOCIDAD",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // ASIG_RIEGO ::= Riego LLAVES_ERROR Durante Numero TIPO_HORA COMA Empezar Numero TIPO_HORA LLAVES_ERROR SENTENCIA_RUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_RIEGO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // ASIG_RIEGO ::= Riego Parentesis_a Durante Numero TIPO_HORA COMA Empezar Numero TIPO_HORA LLAVES_ERROR SENTENCIA_RUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_RIEGO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // ASIG_RIEGO ::= Riego LLAVES_ERROR Durante Numero TIPO_HORA COMA Empezar Numero TIPO_HORA Parentesis_c SENTENCIA_RUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_RIEGO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // ASIG_RIEGO ::= Riego LLAVES_ERROR Durante Numero TIPO_HORA COMA Empezar Numero TIPO_HORA LLAVES_ERROR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_RIEGO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // ASIG_RIEGO ::= Riego Parentesis_a Durante Numero TIPO_HORA COMA Empezar Numero TIPO_HORA LLAVES_ERROR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_RIEGO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // ASIG_RIEGO ::= Riego LLAVES_ERROR Durante Numero TIPO_HORA COMA Empezar Numero TIPO_HORA Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_RIEGO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // ASIG_RIEGO ::= Identificador Parentesis_a Identificador Identificador TIPO_HORA COMA Identificador Identificador TIPO_HORA Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta revise manual 01");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_RIEGO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // ASIG_RIEGO ::= Riego Parentesis_a Identificador Identificador TIPO_HORA COMA Identificador Identificador TIPO_HORA Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta revise manual 01");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_RIEGO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // ASIG_RIEGO ::= Identificador Parentesis_a Durante Identificador TIPO_HORA COMA Identificador Identificador TIPO_HORA Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta revise manual 02");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_RIEGO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // ASIG_RIEGO ::= Identificador Parentesis_a Identificador Numero TIPO_HORA COMA Identificador Identificador TIPO_HORA Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta revise manual 01");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_RIEGO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // ASIG_RIEGO ::= Identificador Parentesis_a Identificador Identificador TIPO_HORA COMA Empezar Identificador TIPO_HORA Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta revise manual 01");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_RIEGO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // ASIG_RIEGO ::= Identificador Parentesis_a Identificador Identificador TIPO_HORA COMA Identificador Numero TIPO_HORA Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta revise manual 01");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_RIEGO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // ASIG_RIEGO ::= Riego Parentesis_a Durante Identificador TIPO_HORA COMA Identificador Identificador TIPO_HORA Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta revise manual 01");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_RIEGO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // ASIG_RIEGO ::= Riego Parentesis_a Identificador Numero TIPO_HORA COMA Identificador Identificador TIPO_HORA Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta revise manual 03");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_RIEGO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // ASIG_RIEGO ::= Identificador Parentesis_a Durante Numero TIPO_HORA COMA Identificador Identificador TIPO_HORA Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta revise manual 03");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_RIEGO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // ASIG_RIEGO ::= Identificador Parentesis_a Durante Identificador TIPO_HORA COMA Empezar Identificador TIPO_HORA Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta revise manual 02");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_RIEGO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // ASIG_RIEGO ::= Identificador Parentesis_a Identificador Numero TIPO_HORA COMA Empezar Identificador TIPO_HORA Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta revise manual 01");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_RIEGO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // ASIG_RIEGO ::= Identificador Parentesis_a Identificador Numero TIPO_HORA COMA Identificador Numero TIPO_HORA Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta revise manual 01");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_RIEGO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // ASIG_RIEGO ::= Identificador Parentesis_a Identificador Identificador TIPO_HORA COMA Empezar Numero TIPO_HORA Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta revise manual 01");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_RIEGO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // ASIG_RIEGO ::= Riego Parentesis_a Durante Numero TIPO_HORA COMA Identificador Identificador TIPO_HORA Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta revise manual 03");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_RIEGO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // ASIG_RIEGO ::= Riego Parentesis_a Durante Identificador TIPO_HORA COMA Empezar Identificador TIPO_HORA Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta revise manual 01");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_RIEGO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // ASIG_RIEGO ::= Riego Parentesis_a Durante Identificador TIPO_HORA COMA Identificador Numero TIPO_HORA Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta revise manual  01");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_RIEGO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // ASIG_RIEGO ::= Riego Parentesis_a Identificador Numero TIPO_HORA COMA Empezar Identificador TIPO_HORA Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta revise manual 01");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_RIEGO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // ASIG_RIEGO ::= Riego Parentesis_a Identificador Numero TIPO_HORA COMA Identificador Numero TIPO_HORA Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta revise manual 01");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_RIEGO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // ASIG_RIEGO ::= Riego Parentesis_a Identificador Identificador TIPO_HORA COMA Empezar Numero TIPO_HORA Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta revise manual 01");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_RIEGO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // ASIG_RIEGO ::= Identificador Parentesis_a Durante Numero TIPO_HORA COMA Empezar Identificador TIPO_HORA Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta revise manual 04");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_RIEGO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // ASIG_RIEGO ::= Identificador Parentesis_a Durante Numero TIPO_HORA COMA Identificador Numero TIPO_HORA Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta revise manua 03");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_RIEGO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // ASIG_RIEGO ::= Identificador Parentesis_a Durante Identificador TIPO_HORA COMA Empezar Numero TIPO_HORA Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta revise manual 03");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_RIEGO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // ASIG_RIEGO ::= Identificador Parentesis_a Identificador Numero TIPO_HORA COMA Empezar Numero TIPO_HORA Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta revise manual 03");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_RIEGO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // ASIG_RIEGO ::= Riego Parentesis_a Durante Numero TIPO_HORA COMA Empezar Identificador TIPO_HORA Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta revise manual 01");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_RIEGO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // ASIG_RIEGO ::= Riego Parentesis_a Durante Numero TIPO_HORA COMA Identificador Numero TIPO_HORA Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta revise manua 02l");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_RIEGO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // ASIG_RIEGO ::= Riego Parentesis_a Durante Identificador TIPO_HORA COMA Empezar Numero TIPO_HORA Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta revise manua 01l");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_RIEGO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // ASIG_RIEGO ::= Riego Parentesis_a Identificador Numero TIPO_HORA COMA Empezar Numero TIPO_HORA Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta revise manua 01l");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_RIEGO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // ASIG_RIEGO ::= Identificador Parentesis_a Durante Numero TIPO_HORA COMA Empezar Numero TIPO_HORA Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta revise manual 01");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_RIEGO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // ASIG_RIEGO ::= Riego Parentesis_a Durante Numero TIPO_HORA COMA Empezar TIPO_HORA Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Se esperaba un número");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_RIEGO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // ASIG_RIEGO ::= Riego Parentesis_a Durante Numero TIPO_HORA COMA Numero TIPO_HORA Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Se requieren palabra reservada empezar");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_RIEGO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // ASIG_RIEGO ::= Riego Parentesis_a Durante Numero TIPO_HORA Empezar Numero TIPO_HORA Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Se requieren dos parámetros");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_RIEGO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // ASIG_RIEGO ::= Riego Parentesis_a Durante TIPO_HORA COMA Empezar Numero TIPO_HORA Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Se esperaba un número");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_RIEGO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // ASIG_RIEGO ::= Riego Parentesis_a Numero TIPO_HORA COMA Empezar Numero TIPO_HORA Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error:  Se esperaba la palabra reservada durante");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_RIEGO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // ASIG_RIEGO ::= Riego Durante Numero TIPO_HORA COMA Empezar Numero TIPO_HORA Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Se requiere paréntesis que abre");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_RIEGO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ASIG_RIEGO ::= Parentesis_a Durante Numero TIPO_HORA COMA Empezar Numero TIPO_HORA Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Se esperaba la palabra reservada riego");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_RIEGO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ASIG_RIEGO ::= Riego Parentesis_a Durante Numero TIPO_HORA COMA Empezar Numero TIPO_HORA Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_RIEGO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ASIG_RIEGO ::= Riego Parentesis_a Durante Numero TIPO_HORA COMA Empezar Numero TIPO_HORA Parentesis_c SENTENCIA_RUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_RIEGO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // COMPROBACION ::= Mayor_igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPROBACION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // COMPROBACION ::= Menor_igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPROBACION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // COMPROBACION ::= Igual_igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPROBACION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // COMPROBACION ::= Menor_que 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPROBACION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // COMPROBACION ::= Mayor_que 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPROBACION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ASIG_DATOS ::= Identificador Igual 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: se espera un numero ");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_DATOS",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ASIG_DATOS ::= Identificador Numero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta se espera un = ");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_DATOS",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ASIG_DATOS ::= Igual Numero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: se espera un identificador");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_DATOS",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ASIG_DATOS ::= Identificador Igual Identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: se espera un numero despues del igual");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_DATOS",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ASIG_DATOS ::= Identificador COMPROBACION Numero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Operacion no valida se espera un igual '='");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_DATOS",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ASIG_DATOS ::= Numero Igual Numero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: se espera un identificador antes del igual");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_DATOS",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ASIG_DATOS ::= Identificador Igual Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_DATOS",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ASIG_DATOS ::= Identificador Igual Numero SENTENCIA_RUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG_DATOS",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // SENTENCIA_RUT ::= ASIG_MUSICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RUT",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // SENTENCIA_RUT ::= COMPROB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RUT",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // SENTENCIA_RUT ::= ASIG_FERTILIZANTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RUT",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // SENTENCIA_RUT ::= ASIG_LUMINOCIDAD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RUT",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // SENTENCIA_RUT ::= ASIG_RIEGO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RUT",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // SENTENCIA_RUT ::= ASIG_DATOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RUT",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // RUTINA_REPETIR ::= Rutina PARENTESIS_ERROR3 SENTENCIA_RUT PARENTESIS_ERROR3 Repetir Numero TIPO_HORA RUTINA_REPETIR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RUTINA_REPETIR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // RUTINA_REPETIR ::= Rutina Llaves_a SENTENCIA_RUT PARENTESIS_ERROR3 Repetir Numero TIPO_HORA RUTINA_REPETIR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RUTINA_REPETIR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // RUTINA_REPETIR ::= Rutina PARENTESIS_ERROR3 SENTENCIA_RUT Llaves_c Repetir Numero TIPO_HORA RUTINA_REPETIR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RUTINA_REPETIR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // RUTINA_REPETIR ::= Rutina PARENTESIS_ERROR3 SENTENCIA_RUT PARENTESIS_ERROR3 Repetir Numero TIPO_HORA RUTINA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RUTINA_REPETIR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // RUTINA_REPETIR ::= Rutina Llaves_a SENTENCIA_RUT PARENTESIS_ERROR3 Repetir Numero TIPO_HORA RUTINA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RUTINA_REPETIR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // RUTINA_REPETIR ::= Rutina PARENTESIS_ERROR3 SENTENCIA_RUT PARENTESIS_ERROR3 Repetir Numero TIPO_HORA Rutina PARENTESIS_ERROR3 SENTENCIA_RUT Llaves_c Repetir Numero TIPO_HORA RUTINA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RUTINA_REPETIR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // RUTINA_REPETIR ::= Rutina Llaves_a SENTENCIA_RUT PARENTESIS_ERROR3 Repetir Numero TIPO_HORA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RUTINA_REPETIR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // RUTINA_REPETIR ::= Rutina PARENTESIS_ERROR3 SENTENCIA_RUT Llaves_c Repetir Numero TIPO_HORA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RUTINA_REPETIR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // RUTINA_REPETIR ::= Numero Llaves_a SENTENCIA_RUT Llaves_c Numero Numero TIPO_HORA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta revise manual 18");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RUTINA_REPETIR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // RUTINA_REPETIR ::= Rutina Llaves_a SENTENCIA_RUT Llaves_c Numero Numero TIPO_HORA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta revise manual 17");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RUTINA_REPETIR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // RUTINA_REPETIR ::= Numero Llaves_a SENTENCIA_RUT Llaves_c Repetir Numero TIPO_HORA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta revise manual 16");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RUTINA_REPETIR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // RUTINA_REPETIR ::= Identificador Llaves_a SENTENCIA_RUT Llaves_c Identificador Identificador TIPO_HORA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta revise manual 15");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RUTINA_REPETIR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // RUTINA_REPETIR ::= Rutina Llaves_a SENTENCIA_RUT Llaves_c Identificador Identificador TIPO_HORA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta revise manual 14");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RUTINA_REPETIR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // RUTINA_REPETIR ::= Identificador Llaves_a SENTENCIA_RUT Llaves_c Repetir Identificador TIPO_HORA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta se espera rutina 13");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RUTINA_REPETIR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // RUTINA_REPETIR ::= Identificador Llaves_a SENTENCIA_RUT Llaves_c Identificador Numero TIPO_HORA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta se espera rutina 12");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RUTINA_REPETIR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // RUTINA_REPETIR ::= Rutina Llaves_a SENTENCIA_RUT Llaves_c Repetir Identificador TIPO_HORA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Tipo de hora no valida se espera 'hr' o 'min'");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RUTINA_REPETIR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // RUTINA_REPETIR ::= Rutina Llaves_a SENTENCIA_RUT Llaves_c Identificador Numero TIPO_HORA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Ese espera la palabra reservada repetir");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RUTINA_REPETIR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // RUTINA_REPETIR ::= Identificador Llaves_a SENTENCIA_RUT Llaves_c Repetir Numero TIPO_HORA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: se espera la palabra reservafda rutina ");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RUTINA_REPETIR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // RUTINA_REPETIR ::= Rutina Llaves_a SENTENCIA_RUT Llaves_c Repetir TIPO_HORA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Se espera Numero despues de la palabra reservada repetir");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RUTINA_REPETIR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // RUTINA_REPETIR ::= Rutina Llaves_a SENTENCIA_RUT Llaves_c Numero TIPO_HORA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Se espera la palabra reservada repetir antes del numero");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RUTINA_REPETIR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // RUTINA_REPETIR ::= Rutina Llaves_a SENTENCIA_RUT Repetir Numero TIPO_HORA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error:  Estructura incorrecta se espera llave '}' ");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RUTINA_REPETIR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // RUTINA_REPETIR ::= Rutina SENTENCIA_RUT Llaves_c Repetir Numero TIPO_HORA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error:  Estructura incorrecta se espera llave '{' ");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RUTINA_REPETIR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // RUTINA_REPETIR ::= Rutina Llaves_a SENTENCIA_RUT Llaves_c Repetir Numero TIPO_HORA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RUTINA_REPETIR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // RUTINA_REPETIR ::= Rutina Llaves_a SENTENCIA_RUT Llaves_c Repetir Numero TIPO_HORA RUTINA_REPETIR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RUTINA_REPETIR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // RUTINA_REPETIR ::= Rutina Llaves_a SENTENCIA_RUT Llaves_c Repetir Numero TIPO_HORA RUTINA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RUTINA_REPETIR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // TIPO_HORA ::= Min 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_HORA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // TIPO_HORA ::= Hr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_HORA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Tipo_dato ::= Musica 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_dato",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Tipo_dato ::= Volumen 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_dato",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Tipo_dato ::= Luz 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_dato",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Tipo_dato ::= Vaho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_dato",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Tipo_dato ::= Grados 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_dato",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // PARENTESIS_ERROR3 ::= Corchete_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta operador no valido");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARENTESIS_ERROR3",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // PARENTESIS_ERROR3 ::= Corchete_a 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta operador no valido");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARENTESIS_ERROR3",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // PARENTESIS_ERROR3 ::= Llaves_c Llaves_a 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta operador no valido");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARENTESIS_ERROR3",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // PARENTESIS_ERROR3 ::= Llaves_a Llaves_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta operador no valido");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARENTESIS_ERROR3",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // PARENTESIS_ERROR3 ::= Llaves_a Llaves_a 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta operador no valido");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARENTESIS_ERROR3",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // RUTINA ::= Rutina PARENTESIS_ERROR3 SENTENCIA_RUT PARENTESIS_ERROR3 RUTINA_REPETIR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RUTINA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // RUTINA ::= Rutina Llaves_a SENTENCIA_RUT PARENTESIS_ERROR3 RUTINA_REPETIR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RUTINA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // RUTINA ::= Rutina PARENTESIS_ERROR3 SENTENCIA_RUT Llaves_c RUTINA_REPETIR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RUTINA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // RUTINA ::= Rutina PARENTESIS_ERROR3 SENTENCIA_RUT PARENTESIS_ERROR3 RUTINA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RUTINA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // RUTINA ::= Rutina Llaves_a SENTENCIA_RUT PARENTESIS_ERROR3 RUTINA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RUTINA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // RUTINA ::= Rutina PARENTESIS_ERROR3 SENTENCIA_RUT PARENTESIS_ERROR3 Rutina PARENTESIS_ERROR3 SENTENCIA_RUT Llaves_c RUTINA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RUTINA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // RUTINA ::= Rutina Llaves_a SENTENCIA_RUT PARENTESIS_ERROR3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RUTINA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // RUTINA ::= Rutina PARENTESIS_ERROR3 SENTENCIA_RUT Llaves_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RUTINA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // RUTINA ::= Numero Llaves_a SENTENCIA_RUT Llaves_c RUTINA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta revise manual 11");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RUTINA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // RUTINA ::= Identificador Llaves_a SENTENCIA_RUT Llaves_c RUTINA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta revise manual se espera rutina");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RUTINA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // RUTINA ::= Rutina SENTENCIA_RUT Llaves_c RUTINA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta se espera llave '{' ");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RUTINA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // RUTINA ::= Rutina Llaves_a SENTENCIA_RUT Llaves_c RUTINA_REPETIR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RUTINA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // RUTINA ::= Rutina Llaves_a SENTENCIA_RUT Llaves_c RUTINA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RUTINA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // RUTINA ::= Rutina Llaves_a SENTENCIA_RUT Llaves_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RUTINA",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARACION_VARIABLE ::= Numero Identificador DECLARACION_VARIABLE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: se espera tipo de dato");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARACION_VARIABLE ::= Identificador Identificador DECLARACION_VARIABLE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: se espera tipo de dato");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACION_VARIABLE ::= Tipo_dato Numero DECLARACION_VARIABLE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: se espera un identificador");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLARACION_VARIABLE ::= RUTINA_REPETIR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARACION_VARIABLE ::= RUTINA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION_VARIABLE ::= Tipo_dato Identificador DECLARACION_VARIABLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLE",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PARENTESIS_ERROR2 ::= Corchete_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta operador no valido");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARENTESIS_ERROR2",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PARENTESIS_ERROR2 ::= Corchete_a 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta operador no valido");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARENTESIS_ERROR2",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PARENTESIS_ERROR2 ::= Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta operador no valido");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARENTESIS_ERROR2",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PARENTESIS_ERROR2 ::= Parentesis_a 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta operador no valido");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARENTESIS_ERROR2",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // INVERNADERO ::= Numero Identificador Llaves_a DECLARACION_VARIABLE PARENTESIS_ERROR2 INVERNADERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INVERNADERO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // INVERNADERO ::= Numero Identificador PARENTESIS_ERROR2 DECLARACION_VARIABLE Llaves_c INVERNADERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INVERNADERO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // INVERNADERO ::= Identificador Identificador Llaves_a DECLARACION_VARIABLE PARENTESIS_ERROR2 INVERNADERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INVERNADERO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // INVERNADERO ::= Identificador Identificador PARENTESIS_ERROR2 DECLARACION_VARIABLE Llaves_c INVERNADERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INVERNADERO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // INVERNADERO ::= Iniciar Identificador DECLARACION_VARIABLE PARENTESIS_ERROR2 INVERNADERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INVERNADERO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // INVERNADERO ::= Iniciar Llaves_a DECLARACION_VARIABLE PARENTESIS_ERROR2 INVERNADERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INVERNADERO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // INVERNADERO ::= Iniciar PARENTESIS_ERROR2 DECLARACION_VARIABLE Llaves_c INVERNADERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INVERNADERO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // INVERNADERO ::= Identificador Llaves_a DECLARACION_VARIABLE PARENTESIS_ERROR2 INVERNADERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INVERNADERO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // INVERNADERO ::= Identificador PARENTESIS_ERROR2 DECLARACION_VARIABLE Llaves_c INVERNADERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INVERNADERO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // INVERNADERO ::= Iniciar Identificador PARENTESIS_ERROR2 DECLARACION_VARIABLE PARENTESIS_ERROR2 INVERNADERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INVERNADERO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // INVERNADERO ::= Iniciar Identificador Llaves_c DECLARACION_VARIABLE PARENTESIS_ERROR2 INVERNADERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INVERNADERO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // INVERNADERO ::= Iniciar Identificador PARENTESIS_ERROR2 DECLARACION_VARIABLE Llaves_c INVERNADERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INVERNADERO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // INVERNADERO ::= Numero Identificador Llaves_a DECLARACION_VARIABLE PARENTESIS_ERROR2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INVERNADERO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // INVERNADERO ::= Numero Identificador PARENTESIS_ERROR2 DECLARACION_VARIABLE Llaves_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INVERNADERO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // INVERNADERO ::= Identificador Identificador Llaves_a DECLARACION_VARIABLE PARENTESIS_ERROR2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INVERNADERO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // INVERNADERO ::= Identificador Identificador PARENTESIS_ERROR2 DECLARACION_VARIABLE Llaves_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INVERNADERO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INVERNADERO ::= Iniciar Identificador DECLARACION_VARIABLE PARENTESIS_ERROR2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INVERNADERO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INVERNADERO ::= Iniciar Llaves_a DECLARACION_VARIABLE PARENTESIS_ERROR2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INVERNADERO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INVERNADERO ::= Iniciar PARENTESIS_ERROR2 DECLARACION_VARIABLE Llaves_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INVERNADERO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INVERNADERO ::= Identificador Llaves_a DECLARACION_VARIABLE PARENTESIS_ERROR2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INVERNADERO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INVERNADERO ::= Identificador PARENTESIS_ERROR2 DECLARACION_VARIABLE Llaves_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INVERNADERO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INVERNADERO ::= Iniciar Identificador PARENTESIS_ERROR2 DECLARACION_VARIABLE PARENTESIS_ERROR2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INVERNADERO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INVERNADERO ::= Iniciar Identificador Llaves_c DECLARACION_VARIABLE PARENTESIS_ERROR2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INVERNADERO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INVERNADERO ::= Iniciar Identificador PARENTESIS_ERROR2 DECLARACION_VARIABLE Llaves_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INVERNADERO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INVERNADERO ::= Numero Identificador Llaves_a DECLARACION_VARIABLE Llaves_c INVERNADERO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura invalidad revise manual 10");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INVERNADERO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INVERNADERO ::= Identificador Identificador Llaves_a DECLARACION_VARIABLE Llaves_c INVERNADERO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura invalidad revise manual 09");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INVERNADERO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INVERNADERO ::= Iniciar Identificador DECLARACION_VARIABLE Llaves_c INVERNADERO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: se esperaba llave '{' ");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INVERNADERO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // INVERNADERO ::= Iniciar Llaves_a DECLARACION_VARIABLE Llaves_c INVERNADERO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Se espera un identificador despies de iniciar");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INVERNADERO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INVERNADERO ::= Identificador Llaves_a DECLARACION_VARIABLE Llaves_c INVERNADERO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t ErrorSe espera la palabra reservada iniciar");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INVERNADERO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INVERNADERO ::= Iniciar Identificador Llaves_a DECLARACION_VARIABLE Llaves_c INVERNADERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INVERNADERO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INVERNADERO ::= Iniciar Identificador Llaves_a DECLARACION_VARIABLE Llaves_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INVERNADERO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PARENTESIS_ERROR ::= Corchete_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta operador no valido");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARENTESIS_ERROR",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PARENTESIS_ERROR ::= Corchete_a 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta operador no valido");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARENTESIS_ERROR",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PARENTESIS_ERROR ::= Llaves_c Llaves_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta operador no valido");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARENTESIS_ERROR",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PARENTESIS_ERROR ::= Llaves_c Llaves_a 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta operador no valido");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARENTESIS_ERROR",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PARENTESIS_ERROR ::= Llaves_a Llaves_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta operador no valido");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARENTESIS_ERROR",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PARENTESIS_ERROR ::= Llaves_a Llaves_a 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta operador no valido");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARENTESIS_ERROR",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PARENTESIS_ERROR ::= Parentesis_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta operador no valido");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARENTESIS_ERROR",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PARENTESIS_ERROR ::= Parentesis_a 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta operador no valido");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARENTESIS_ERROR",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INICIO ::= Inverna PARENTESIS_ERROR INVERNADERO PARENTESIS_ERROR Dero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INICIO ::= Inverna Llaves_a INVERNADERO PARENTESIS_ERROR Dero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INICIO ::= Inverna PARENTESIS_ERROR INVERNADERO Llaves_c Dero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INICIO ::= Identificador Llaves_a INVERNADERO Llaves_c Numero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta revise manual 08");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INICIO ::= Numero Llaves_a INVERNADERO Llaves_c Identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta revise manual 07");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INICIO ::= Numero Llaves_a INVERNADERO Llaves_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta revise manual 05");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INICIO ::= Llaves_a INVERNADERO Llaves_c Numero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura espera dero");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INICIO ::= Numero Llaves_a INVERNADERO Llaves_c Numero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta revise manual 04");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INICIO ::= Inverna Llaves_a INVERNADERO Llaves_c Numero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Se espera la palabra reservada dero ");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INICIO ::= Identificador Llaves_a INVERNADERO Llaves_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta revise manual 04");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INICIO ::= Llaves_a INVERNADERO Llaves_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta revise manual 03");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INICIO ::= Llaves_a INVERNADERO Llaves_c Identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta revise manual 02");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INICIO ::= Identificador Llaves_a INVERNADERO Llaves_c Identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Estructura incorrecta revise manual 01");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO ::= Inverna Llaves_a INVERNADERO Llaves_c Identificador 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Se esperaba la palabra reservada dero ");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= Identificador Llaves_a INVERNADERO Llaves_c Dero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Se esperaba la palabra reservada inverna");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= Inverna Llaves_a INVERNADERO Llaves_c 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: Falta cierre de programa 'dero'");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= Llaves_a INVERNADERO Llaves_c Dero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, LINEA: "+(sright+1)+"\n \t Error: Falta inicio de programa 'inverna'");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= Inverna INVERNADERO Dero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, linea: "+(sright+1)+"\n \t Error: faltan llaves de apertura y cierre ");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= Inverna Llaves_a INVERNADERO Dero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, LINEA: "+(sright+1)+"\n \t Error: se espera llava que cierra ");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Inverna INVERNADERO Llaves_c Dero 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		A.genErrores.add("Error sintáctico, LINEA: "+(sright+1)+"\n \t Error: Se epsera llave que cierra ");
    A.genErrores.add("---------------------------------------------------------------------------------");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Inverna Llaves_a INVERNADERO Llaves_c Dero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

